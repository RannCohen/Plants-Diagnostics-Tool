
Plants Diagnostics Tool.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f18  08004f18  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004f18  08004f18  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f18  08004f18  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f18  08004f18  00014f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000074  08004f94  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004f94  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c839  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7a  00000000  00000000  0002c8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  0002f370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a11  00000000  00000000  0002fe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df45  00000000  00000000  000518a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce11d  00000000  00000000  0005f7e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d903  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003500  00000000  00000000  0012d954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004dfc 	.word	0x08004dfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004dfc 	.word	0x08004dfc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af02      	add	r7, sp, #8
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	011b      	lsls	r3, r3, #4
 800028e:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	f023 030f 	bic.w	r3, r3, #15
 8000296:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000298:	7bbb      	ldrb	r3, [r7, #14]
 800029a:	f043 030c 	orr.w	r3, r3, #12
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	723b      	strb	r3, [r7, #8]
 80002a2:	7bbb      	ldrb	r3, [r7, #14]
 80002a4:	f043 0308 	orr.w	r3, r3, #8
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	727b      	strb	r3, [r7, #9]
 80002ac:	7bfb      	ldrb	r3, [r7, #15]
 80002ae:	f043 030c 	orr.w	r3, r3, #12
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	72bb      	strb	r3, [r7, #10]
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
 80002b8:	f043 0308 	orr.w	r3, r3, #8
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80002c0:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <lcd16x2_i2c_sendCommand+0x60>)
 80002c2:	6818      	ldr	r0, [r3, #0]
 80002c4:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <lcd16x2_i2c_sendCommand+0x64>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	b299      	uxth	r1, r3
 80002ca:	f107 0208 	add.w	r2, r7, #8
 80002ce:	23c8      	movs	r3, #200	; 0xc8
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	2304      	movs	r3, #4
 80002d4:	f002 fb14 	bl	8002900 <HAL_I2C_Master_Transmit>
}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000090 	.word	0x20000090
 80002e4:	20000094 	.word	0x20000094

080002e8 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af02      	add	r7, sp, #8
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	011b      	lsls	r3, r3, #4
 80002f6:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	f023 030f 	bic.w	r3, r3, #15
 80002fe:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000300:	7bbb      	ldrb	r3, [r7, #14]
 8000302:	f043 030d 	orr.w	r3, r3, #13
 8000306:	b2db      	uxtb	r3, r3
 8000308:	723b      	strb	r3, [r7, #8]
 800030a:	7bbb      	ldrb	r3, [r7, #14]
 800030c:	f043 0309 	orr.w	r3, r3, #9
 8000310:	b2db      	uxtb	r3, r3
 8000312:	727b      	strb	r3, [r7, #9]
 8000314:	7bfb      	ldrb	r3, [r7, #15]
 8000316:	f043 030d 	orr.w	r3, r3, #13
 800031a:	b2db      	uxtb	r3, r3
 800031c:	72bb      	strb	r3, [r7, #10]
 800031e:	7bfb      	ldrb	r3, [r7, #15]
 8000320:	f043 0309 	orr.w	r3, r3, #9
 8000324:	b2db      	uxtb	r3, r3
 8000326:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <lcd16x2_i2c_sendData+0x60>)
 800032a:	6818      	ldr	r0, [r3, #0]
 800032c:	4b07      	ldr	r3, [pc, #28]	; (800034c <lcd16x2_i2c_sendData+0x64>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	b299      	uxth	r1, r3
 8000332:	f107 0208 	add.w	r2, r7, #8
 8000336:	23c8      	movs	r3, #200	; 0xc8
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	2304      	movs	r3, #4
 800033c:	f002 fae0 	bl	8002900 <HAL_I2C_Master_Transmit>
}
 8000340:	bf00      	nop
 8000342:	3710      	adds	r7, #16
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000090 	.word	0x20000090
 800034c:	20000094 	.word	0x20000094

08000350 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000358:	2032      	movs	r0, #50	; 0x32
 800035a:	f000 fd45 	bl	8000de8 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 800035e:	4a30      	ldr	r2, [pc, #192]	; (8000420 <lcd16x2_i2c_init+0xd0>)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000364:	4b2e      	ldr	r3, [pc, #184]	; (8000420 <lcd16x2_i2c_init+0xd0>)
 8000366:	6818      	ldr	r0, [r3, #0]
 8000368:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800036c:	2205      	movs	r2, #5
 800036e:	214e      	movs	r1, #78	; 0x4e
 8000370:	f002 fbba 	bl	8002ae8 <HAL_I2C_IsDeviceReady>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d010      	beq.n	800039c <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 800037a:	4b29      	ldr	r3, [pc, #164]	; (8000420 <lcd16x2_i2c_init+0xd0>)
 800037c:	6818      	ldr	r0, [r3, #0]
 800037e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000382:	2205      	movs	r2, #5
 8000384:	217e      	movs	r1, #126	; 0x7e
 8000386:	f002 fbaf 	bl	8002ae8 <HAL_I2C_IsDeviceReady>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000390:	2300      	movs	r3, #0
 8000392:	e040      	b.n	8000416 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000394:	4b23      	ldr	r3, [pc, #140]	; (8000424 <lcd16x2_i2c_init+0xd4>)
 8000396:	227e      	movs	r2, #126	; 0x7e
 8000398:	701a      	strb	r2, [r3, #0]
 800039a:	e002      	b.n	80003a2 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 800039c:	4b21      	ldr	r3, [pc, #132]	; (8000424 <lcd16x2_i2c_init+0xd4>)
 800039e:	224e      	movs	r2, #78	; 0x4e
 80003a0:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 80003a2:	202d      	movs	r0, #45	; 0x2d
 80003a4:	f000 fd20 	bl	8000de8 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 80003a8:	2030      	movs	r0, #48	; 0x30
 80003aa:	f7ff ff69 	bl	8000280 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 80003ae:	2005      	movs	r0, #5
 80003b0:	f000 fd1a 	bl	8000de8 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80003b4:	2030      	movs	r0, #48	; 0x30
 80003b6:	f7ff ff63 	bl	8000280 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80003ba:	2001      	movs	r0, #1
 80003bc:	f000 fd14 	bl	8000de8 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80003c0:	2030      	movs	r0, #48	; 0x30
 80003c2:	f7ff ff5d 	bl	8000280 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80003c6:	2008      	movs	r0, #8
 80003c8:	f000 fd0e 	bl	8000de8 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 80003cc:	2020      	movs	r0, #32
 80003ce:	f7ff ff57 	bl	8000280 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80003d2:	2008      	movs	r0, #8
 80003d4:	f000 fd08 	bl	8000de8 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80003d8:	2028      	movs	r0, #40	; 0x28
 80003da:	f7ff ff51 	bl	8000280 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80003de:	2001      	movs	r0, #1
 80003e0:	f000 fd02 	bl	8000de8 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 80003e4:	2008      	movs	r0, #8
 80003e6:	f7ff ff4b 	bl	8000280 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80003ea:	2001      	movs	r0, #1
 80003ec:	f000 fcfc 	bl	8000de8 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 80003f0:	2001      	movs	r0, #1
 80003f2:	f7ff ff45 	bl	8000280 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80003f6:	2003      	movs	r0, #3
 80003f8:	f000 fcf6 	bl	8000de8 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 80003fc:	2006      	movs	r0, #6
 80003fe:	f7ff ff3f 	bl	8000280 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000402:	2001      	movs	r0, #1
 8000404:	f000 fcf0 	bl	8000de8 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8000408:	200c      	movs	r0, #12
 800040a:	f7ff ff39 	bl	8000280 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800040e:	2003      	movs	r0, #3
 8000410:	f000 fcea 	bl	8000de8 <HAL_Delay>

  return true;
 8000414:	2301      	movs	r3, #1
}
 8000416:	4618      	mov	r0, r3
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000090 	.word	0x20000090
 8000424:	20000094 	.word	0x20000094

08000428 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	460a      	mov	r2, r1
 8000432:	71fb      	strb	r3, [r7, #7]
 8000434:	4613      	mov	r3, r2
 8000436:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000438:	79bb      	ldrb	r3, [r7, #6]
 800043a:	f003 030f 	and.w	r3, r3, #15
 800043e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d108      	bne.n	8000458 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8000446:	7bfb      	ldrb	r3, [r7, #15]
 8000448:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800044c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800044e:	7bfb      	ldrb	r3, [r7, #15]
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ff15 	bl	8000280 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8000456:	e007      	b.n	8000468 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800045e:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff0c 	bl	8000280 <lcd16x2_i2c_sendCommand>
}
 8000468:	bf00      	nop
 800046a:	3710      	adds	r7, #16
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <lcd16x2_i2c_1stLine>:

/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_i2c_1stLine(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(0,0);
 8000474:	2100      	movs	r1, #0
 8000476:	2000      	movs	r0, #0
 8000478:	f7ff ffd6 	bl	8000428 <lcd16x2_i2c_setCursor>
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}

08000480 <lcd16x2_i2c_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_i2c_2ndLine(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(1,0);
 8000484:	2100      	movs	r1, #0
 8000486:	2001      	movs	r0, #1
 8000488:	f7ff ffce 	bl	8000428 <lcd16x2_i2c_setCursor>
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}

08000490 <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000494:	2001      	movs	r0, #1
 8000496:	f7ff fef3 	bl	8000280 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800049a:	2003      	movs	r0, #3
 800049c:	f000 fca4 	bl	8000de8 <HAL_Delay>
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 80004a4:	b40f      	push	{r0, r1, r2, r3}
 80004a6:	b590      	push	{r4, r7, lr}
 80004a8:	b089      	sub	sp, #36	; 0x24
 80004aa:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80004ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004b0:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 80004b2:	f107 0308 	add.w	r3, r7, #8
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80004ba:	4618      	mov	r0, r3
 80004bc:	f004 f846 	bl	800454c <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	77fb      	strb	r3, [r7, #31]
 80004c4:	e00a      	b.n	80004dc <lcd16x2_i2c_printf+0x38>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 80004c6:	7ffb      	ldrb	r3, [r7, #31]
 80004c8:	3320      	adds	r3, #32
 80004ca:	443b      	add	r3, r7
 80004cc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff ff09 	bl	80002e8 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80004d6:	7ffb      	ldrb	r3, [r7, #31]
 80004d8:	3301      	adds	r3, #1
 80004da:	77fb      	strb	r3, [r7, #31]
 80004dc:	7ffc      	ldrb	r4, [r7, #31]
 80004de:	f107 0308 	add.w	r3, r7, #8
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff fe74 	bl	80001d0 <strlen>
 80004e8:	4603      	mov	r3, r0
 80004ea:	429c      	cmp	r4, r3
 80004ec:	d202      	bcs.n	80004f4 <lcd16x2_i2c_printf+0x50>
 80004ee:	7ffb      	ldrb	r3, [r7, #31]
 80004f0:	2b0f      	cmp	r3, #15
 80004f2:	d9e8      	bls.n	80004c6 <lcd16x2_i2c_printf+0x22>
  }
}
 80004f4:	bf00      	nop
 80004f6:	3724      	adds	r7, #36	; 0x24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80004fe:	b004      	add	sp, #16
 8000500:	4770      	bx	lr
	...

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fbf9 	bl	8000cfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f87a 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f94a 	bl	80007a8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000514:	f000 f8c8 	bl	80006a8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000518:	f000 f906 	bl	8000728 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if(lcd16x2_i2c_init(&hi2c1))
 800051c:	482c      	ldr	r0, [pc, #176]	; (80005d0 <main+0xcc>)
 800051e:	f7ff ff17 	bl	8000350 <lcd16x2_i2c_init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d01b      	beq.n	8000560 <main+0x5c>
  {
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2108      	movs	r1, #8
 800052c:	4829      	ldr	r0, [pc, #164]	; (80005d4 <main+0xd0>)
 800052e:	f002 f90d 	bl	800274c <HAL_GPIO_WritePin>
	  lcd16x2_i2c_clear();
 8000532:	f7ff ffad 	bl	8000490 <lcd16x2_i2c_clear>
	  lcd16x2_i2c_1stLine();
 8000536:	f7ff ff9b 	bl	8000470 <lcd16x2_i2c_1stLine>
	  lcd16x2_i2c_printf("  Hello Maya!");
 800053a:	4827      	ldr	r0, [pc, #156]	; (80005d8 <main+0xd4>)
 800053c:	f7ff ffb2 	bl	80004a4 <lcd16x2_i2c_printf>
	  lcd16x2_i2c_2ndLine();
 8000540:	f7ff ff9e 	bl	8000480 <lcd16x2_i2c_2ndLine>
	  lcd16x2_i2c_printf(" Nice plants :)");
 8000544:	4825      	ldr	r0, [pc, #148]	; (80005dc <main+0xd8>)
 8000546:	f7ff ffad 	bl	80004a4 <lcd16x2_i2c_printf>
	  HAL_Delay(2000);
 800054a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800054e:	f000 fc4b 	bl	8000de8 <HAL_Delay>
	  lcd16x2_i2c_clear();
 8000552:	f7ff ff9d 	bl	8000490 <lcd16x2_i2c_clear>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2108      	movs	r1, #8
 800055a:	481e      	ldr	r0, [pc, #120]	; (80005d4 <main+0xd0>)
 800055c:	f002 f8f6 	bl	800274c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(buttonState == 0)
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <main+0xdc>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d110      	bne.n	800058a <main+0x86>
	  {
		  readAdc0();
 8000568:	f000 f972 	bl	8000850 <readAdc0>
		  lcd16x2_i2c_1stLine();
 800056c:	f7ff ff80 	bl	8000470 <lcd16x2_i2c_1stLine>
		  lcd16x2_i2c_printf(" Mode 1 - Light  ");
 8000570:	481c      	ldr	r0, [pc, #112]	; (80005e4 <main+0xe0>)
 8000572:	f7ff ff97 	bl	80004a4 <lcd16x2_i2c_printf>
		  lcd16x2_i2c_2ndLine();
 8000576:	f7ff ff83 	bl	8000480 <lcd16x2_i2c_2ndLine>
		  lcd16x2_i2c_printf("Light Read: %3d%c ", lightPercent, 37);
 800057a:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <main+0xe4>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2225      	movs	r2, #37	; 0x25
 8000580:	4619      	mov	r1, r3
 8000582:	481a      	ldr	r0, [pc, #104]	; (80005ec <main+0xe8>)
 8000584:	f7ff ff8e 	bl	80004a4 <lcd16x2_i2c_printf>
 8000588:	e01e      	b.n	80005c8 <main+0xc4>
	  }
	  else if(buttonState == 1)
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <main+0xdc>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d110      	bne.n	80005b4 <main+0xb0>
	  {
		  readAdc1();
 8000592:	f000 f9c5 	bl	8000920 <readAdc1>
		  lcd16x2_i2c_1stLine();
 8000596:	f7ff ff6b 	bl	8000470 <lcd16x2_i2c_1stLine>
		  lcd16x2_i2c_printf(" Mode 2 - Soil  ");
 800059a:	4815      	ldr	r0, [pc, #84]	; (80005f0 <main+0xec>)
 800059c:	f7ff ff82 	bl	80004a4 <lcd16x2_i2c_printf>
		  lcd16x2_i2c_2ndLine();
 80005a0:	f7ff ff6e 	bl	8000480 <lcd16x2_i2c_2ndLine>
		  lcd16x2_i2c_printf("Soil Read: %3d%c  ", soilPercent, 37);
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <main+0xf0>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2225      	movs	r2, #37	; 0x25
 80005aa:	4619      	mov	r1, r3
 80005ac:	4812      	ldr	r0, [pc, #72]	; (80005f8 <main+0xf4>)
 80005ae:	f7ff ff79 	bl	80004a4 <lcd16x2_i2c_printf>
 80005b2:	e009      	b.n	80005c8 <main+0xc4>
	  }
	  else
	  {
		  lcd16x2_i2c_1stLine();
 80005b4:	f7ff ff5c 	bl	8000470 <lcd16x2_i2c_1stLine>
		  lcd16x2_i2c_printf("Push Mode Button");
 80005b8:	4810      	ldr	r0, [pc, #64]	; (80005fc <main+0xf8>)
 80005ba:	f7ff ff73 	bl	80004a4 <lcd16x2_i2c_printf>
		  lcd16x2_i2c_2ndLine();
 80005be:	f7ff ff5f 	bl	8000480 <lcd16x2_i2c_2ndLine>
		  lcd16x2_i2c_printf("    *****");
 80005c2:	480f      	ldr	r0, [pc, #60]	; (8000600 <main+0xfc>)
 80005c4:	f7ff ff6e 	bl	80004a4 <lcd16x2_i2c_printf>
	  }
	  HAL_Delay(100);
 80005c8:	2064      	movs	r0, #100	; 0x64
 80005ca:	f000 fc0d 	bl	8000de8 <HAL_Delay>
	  if(buttonState == 0)
 80005ce:	e7c7      	b.n	8000560 <main+0x5c>
 80005d0:	200000fc 	.word	0x200000fc
 80005d4:	48000400 	.word	0x48000400
 80005d8:	08004e14 	.word	0x08004e14
 80005dc:	08004e24 	.word	0x08004e24
 80005e0:	20000168 	.word	0x20000168
 80005e4:	08004e34 	.word	0x08004e34
 80005e8:	2000015c 	.word	0x2000015c
 80005ec:	08004e48 	.word	0x08004e48
 80005f0:	08004e5c 	.word	0x08004e5c
 80005f4:	20000154 	.word	0x20000154
 80005f8:	08004e70 	.word	0x08004e70
 80005fc:	08004e84 	.word	0x08004e84
 8000600:	08004e98 	.word	0x08004e98

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b096      	sub	sp, #88	; 0x58
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2244      	movs	r2, #68	; 0x44
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 ff7c 	bl	8004510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000626:	f44f 7000 	mov.w	r0, #512	; 0x200
 800062a:	f002 fe09 	bl	8003240 <HAL_PWREx_ControlVoltageScaling>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000634:	f000 f9e8 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000638:	2310      	movs	r3, #16
 800063a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000644:	2360      	movs	r3, #96	; 0x60
 8000646:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800064c:	2301      	movs	r3, #1
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000650:	2301      	movs	r3, #1
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000654:	2310      	movs	r3, #16
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000658:	2307      	movs	r3, #7
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fe3f 	bl	80032ec <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000674:	f000 f9c8 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2303      	movs	r3, #3
 800067e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	2101      	movs	r1, #1
 8000690:	4618      	mov	r0, r3
 8000692:	f003 fa3f 	bl	8003b14 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800069c:	f000 f9b4 	bl	8000a08 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3758      	adds	r7, #88	; 0x58
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_ADC1_Init+0x78>)
 80006ae:	4a1d      	ldr	r2, [pc, #116]	; (8000724 <MX_ADC1_Init+0x7c>)
 80006b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_ADC1_Init+0x78>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_ADC1_Init+0x78>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_ADC1_Init+0x78>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_ADC1_Init+0x78>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_ADC1_Init+0x78>)
 80006cc:	2204      	movs	r2, #4
 80006ce:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_ADC1_Init+0x78>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_ADC1_Init+0x78>)
 80006d8:	2200      	movs	r2, #0
 80006da:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_ADC1_Init+0x78>)
 80006de:	2201      	movs	r2, #1
 80006e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_ADC1_Init+0x78>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MX_ADC1_Init+0x78>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_ADC1_Init+0x78>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_ADC1_Init+0x78>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_ADC1_Init+0x78>)
 8000700:	2200      	movs	r2, #0
 8000702:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_ADC1_Init+0x78>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_ADC1_Init+0x78>)
 800070e:	f000 fda5 	bl	800125c <HAL_ADC_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000718:	f000 f976 	bl	8000a08 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000098 	.word	0x20000098
 8000724:	50040000 	.word	0x50040000

08000728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_I2C1_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_I2C1_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_I2C1_Init+0x74>)
 8000734:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <MX_I2C1_Init+0x7c>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_I2C1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_I2C1_Init+0x74>)
 8000740:	2201      	movs	r2, #1
 8000742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_I2C1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_I2C1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_I2C1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000762:	480e      	ldr	r0, [pc, #56]	; (800079c <MX_I2C1_Init+0x74>)
 8000764:	f002 f83c 	bl	80027e0 <HAL_I2C_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800076e:	f000 f94b 	bl	8000a08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000772:	2100      	movs	r1, #0
 8000774:	4809      	ldr	r0, [pc, #36]	; (800079c <MX_I2C1_Init+0x74>)
 8000776:	f002 fcbd 	bl	80030f4 <HAL_I2CEx_ConfigAnalogFilter>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000780:	f000 f942 	bl	8000a08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000784:	2100      	movs	r1, #0
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_I2C1_Init+0x74>)
 8000788:	f002 fcff 	bl	800318a <HAL_I2CEx_ConfigDigitalFilter>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000792:	f000 f939 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000fc 	.word	0x200000fc
 80007a0:	40005400 	.word	0x40005400
 80007a4:	00707cbb 	.word	0x00707cbb

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_GPIO_Init+0xa0>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a21      	ldr	r2, [pc, #132]	; (8000848 <MX_GPIO_Init+0xa0>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_GPIO_Init+0xa0>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_GPIO_Init+0xa0>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <MX_GPIO_Init+0xa0>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_GPIO_Init+0xa0>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2108      	movs	r1, #8
 80007f2:	4816      	ldr	r0, [pc, #88]	; (800084c <MX_GPIO_Init+0xa4>)
 80007f4:	f001 ffaa 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80007f8:	2308      	movs	r3, #8
 80007fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000802:	2302      	movs	r3, #2
 8000804:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	4619      	mov	r1, r3
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f001 fe32 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000814:	2308      	movs	r3, #8
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4808      	ldr	r0, [pc, #32]	; (800084c <MX_GPIO_Init+0xa4>)
 800082c:	f001 fe24 	bl	8002478 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	2009      	movs	r0, #9
 8000836:	f001 fde8 	bl	800240a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800083a:	2009      	movs	r0, #9
 800083c:	f001 fe01 	bl	8002442 <HAL_NVIC_EnableIRQ>

}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000
 800084c:	48000400 	.word	0x48000400

08000850 <readAdc0>:

/* USER CODE BEGIN 4 */

/* Read PA0 */
void readAdc0(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	 sConfig.Channel = ADC_CHANNEL_5;
 8000854:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <readAdc0+0xb4>)
 8000856:	4a2c      	ldr	r2, [pc, #176]	; (8000908 <readAdc0+0xb8>)
 8000858:	601a      	str	r2, [r3, #0]
	 sConfig.Rank = ADC_REGULAR_RANK_1;
 800085a:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <readAdc0+0xb4>)
 800085c:	2206      	movs	r2, #6
 800085e:	605a      	str	r2, [r3, #4]
	 sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000860:	4b28      	ldr	r3, [pc, #160]	; (8000904 <readAdc0+0xb4>)
 8000862:	2203      	movs	r2, #3
 8000864:	609a      	str	r2, [r3, #8]
	 sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000866:	4b27      	ldr	r3, [pc, #156]	; (8000904 <readAdc0+0xb4>)
 8000868:	227f      	movs	r2, #127	; 0x7f
 800086a:	60da      	str	r2, [r3, #12]
	 sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <readAdc0+0xb4>)
 800086e:	2204      	movs	r2, #4
 8000870:	611a      	str	r2, [r3, #16]
	 sConfig.Offset = 0;
 8000872:	4b24      	ldr	r3, [pc, #144]	; (8000904 <readAdc0+0xb4>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000878:	4922      	ldr	r1, [pc, #136]	; (8000904 <readAdc0+0xb4>)
 800087a:	4824      	ldr	r0, [pc, #144]	; (800090c <readAdc0+0xbc>)
 800087c:	f000 ff68 	bl	8001750 <HAL_ADC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <readAdc0+0x3a>
	 {
	   Error_Handler();
 8000886:	f000 f8bf 	bl	8000a08 <Error_Handler>
	 }

	 HAL_ADC_Start(&hadc1);
 800088a:	4820      	ldr	r0, [pc, #128]	; (800090c <readAdc0+0xbc>)
 800088c:	f000 fe2e 	bl	80014ec <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 5);
 8000890:	2105      	movs	r1, #5
 8000892:	481e      	ldr	r0, [pc, #120]	; (800090c <readAdc0+0xbc>)
 8000894:	f000 fec0 	bl	8001618 <HAL_ADC_PollForConversion>
	 lightRead = HAL_ADC_GetValue(&hadc1);
 8000898:	481c      	ldr	r0, [pc, #112]	; (800090c <readAdc0+0xbc>)
 800089a:	f000 ff4c 	bl	8001736 <HAL_ADC_GetValue>
 800089e:	4603      	mov	r3, r0
 80008a0:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <readAdc0+0xc0>)
 80008a2:	6013      	str	r3, [r2, #0]
	 HAL_ADC_Stop(&hadc1);
 80008a4:	4819      	ldr	r0, [pc, #100]	; (800090c <readAdc0+0xbc>)
 80008a6:	f000 fe84 	bl	80015b2 <HAL_ADC_Stop>
	 lightPercent = (lightRead * 100) / 4095;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <readAdc0+0xc0>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2264      	movs	r2, #100	; 0x64
 80008b0:	fb03 f202 	mul.w	r2, r3, r2
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <readAdc0+0xc4>)
 80008b6:	fba3 1302 	umull	r1, r3, r3, r2
 80008ba:	1ad2      	subs	r2, r2, r3
 80008bc:	0852      	lsrs	r2, r2, #1
 80008be:	4413      	add	r3, r2
 80008c0:	0adb      	lsrs	r3, r3, #11
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <readAdc0+0xc8>)
 80008c6:	701a      	strb	r2, [r3, #0]
	 if(lightPercent >= 80)
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <readAdc0+0xc8>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b4f      	cmp	r3, #79	; 0x4f
 80008ce:	d905      	bls.n	80008dc <readAdc0+0x8c>
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2108      	movs	r1, #8
 80008d4:	4811      	ldr	r0, [pc, #68]	; (800091c <readAdc0+0xcc>)
 80008d6:	f001 ff39 	bl	800274c <HAL_GPIO_WritePin>
 80008da:	e00d      	b.n	80008f8 <readAdc0+0xa8>
	 else if(lightPercent >= 70)
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <readAdc0+0xc8>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b45      	cmp	r3, #69	; 0x45
 80008e2:	d904      	bls.n	80008ee <readAdc0+0x9e>
		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008e4:	2108      	movs	r1, #8
 80008e6:	480d      	ldr	r0, [pc, #52]	; (800091c <readAdc0+0xcc>)
 80008e8:	f001 ff48 	bl	800277c <HAL_GPIO_TogglePin>
 80008ec:	e004      	b.n	80008f8 <readAdc0+0xa8>
	 else
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	480a      	ldr	r0, [pc, #40]	; (800091c <readAdc0+0xcc>)
 80008f4:	f001 ff2a 	bl	800274c <HAL_GPIO_WritePin>
	 HAL_Delay(20);
 80008f8:	2014      	movs	r0, #20
 80008fa:	f000 fa75 	bl	8000de8 <HAL_Delay>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000016c 	.word	0x2000016c
 8000908:	14f00020 	.word	0x14f00020
 800090c:	20000098 	.word	0x20000098
 8000910:	20000158 	.word	0x20000158
 8000914:	00100101 	.word	0x00100101
 8000918:	2000015c 	.word	0x2000015c
 800091c:	48000400 	.word	0x48000400

08000920 <readAdc1>:

/* Read PA1 */
void readAdc1(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_6;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <readAdc1+0x64>)
 8000926:	4a18      	ldr	r2, [pc, #96]	; (8000988 <readAdc1+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092a:	4916      	ldr	r1, [pc, #88]	; (8000984 <readAdc1+0x64>)
 800092c:	4817      	ldr	r0, [pc, #92]	; (800098c <readAdc1+0x6c>)
 800092e:	f000 ff0f 	bl	8001750 <HAL_ADC_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <readAdc1+0x1c>
	{
		Error_Handler();
 8000938:	f000 f866 	bl	8000a08 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 800093c:	4813      	ldr	r0, [pc, #76]	; (800098c <readAdc1+0x6c>)
 800093e:	f000 fdd5 	bl	80014ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 5);
 8000942:	2105      	movs	r1, #5
 8000944:	4811      	ldr	r0, [pc, #68]	; (800098c <readAdc1+0x6c>)
 8000946:	f000 fe67 	bl	8001618 <HAL_ADC_PollForConversion>
	soilRead = HAL_ADC_GetValue(&hadc1);
 800094a:	4810      	ldr	r0, [pc, #64]	; (800098c <readAdc1+0x6c>)
 800094c:	f000 fef3 	bl	8001736 <HAL_ADC_GetValue>
 8000950:	4603      	mov	r3, r0
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <readAdc1+0x70>)
 8000954:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <readAdc1+0x6c>)
 8000958:	f000 fe2b 	bl	80015b2 <HAL_ADC_Stop>
	soilPercent = (soilRead * 100) / 4095;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <readAdc1+0x70>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2264      	movs	r2, #100	; 0x64
 8000962:	fb03 f202 	mul.w	r2, r3, r2
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <readAdc1+0x74>)
 8000968:	fba3 1302 	umull	r1, r3, r3, r2
 800096c:	1ad2      	subs	r2, r2, r3
 800096e:	0852      	lsrs	r2, r2, #1
 8000970:	4413      	add	r3, r2
 8000972:	0adb      	lsrs	r3, r3, #11
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <readAdc1+0x78>)
 8000978:	701a      	strb	r2, [r3, #0]
	HAL_Delay(20);
 800097a:	2014      	movs	r0, #20
 800097c:	f000 fa34 	bl	8000de8 <HAL_Delay>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000016c 	.word	0x2000016c
 8000988:	19200040 	.word	0x19200040
 800098c:	20000098 	.word	0x20000098
 8000990:	20000150 	.word	0x20000150
 8000994:	00100101 	.word	0x00100101
 8000998:	20000154 	.word	0x20000154

0800099c <HAL_GPIO_EXTI_Callback>:

/* handle the interrupt */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	80fb      	strh	r3, [r7, #6]
	currTime = HAL_GetTick();
 80009a6:	f000 fa13 	bl	8000dd0 <HAL_GetTick>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80009ae:	6013      	str	r3, [r2, #0]

	if(GPIO_Pin == BUTTON_Pin && (currTime - prevTime) > bounceTime)
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	2b08      	cmp	r3, #8
 80009b4:	d11c      	bne.n	80009f0 <HAL_GPIO_EXTI_Callback+0x54>
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <HAL_GPIO_EXTI_Callback+0x60>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	1ad2      	subs	r2, r2, r3
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d913      	bls.n	80009f0 <HAL_GPIO_EXTI_Callback+0x54>
	{
		buttonState++;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x68>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x68>)
 80009d2:	701a      	strb	r2, [r3, #0]
		if(buttonState % 2 == 0)
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x68>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <HAL_GPIO_EXTI_Callback+0x4c>
				buttonState = 0;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x68>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
		prevTime = currTime;
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a03      	ldr	r2, [pc, #12]	; (80009fc <HAL_GPIO_EXTI_Callback+0x60>)
 80009ee:	6013      	str	r3, [r2, #0]
	}
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000160 	.word	0x20000160
 80009fc:	20000164 	.word	0x20000164
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000168 	.word	0x20000168

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>
	...

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_MspInit+0x44>)
 8000a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <HAL_MspInit+0x44>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6613      	str	r3, [r2, #96]	; 0x60
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_MspInit+0x44>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_MspInit+0x44>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_MspInit+0x44>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_MspInit+0x44>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09e      	sub	sp, #120	; 0x78
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	2254      	movs	r2, #84	; 0x54
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 fd47 	bl	8004510 <memset>
  if(hadc->Instance==ADC1)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a1e      	ldr	r2, [pc, #120]	; (8000b00 <HAL_ADC_MspInit+0xa4>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d134      	bne.n	8000af6 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000a92:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000a96:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f003 fa25 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000aa8:	f7ff ffae 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_ADC_MspInit+0xa8>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab0:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <HAL_ADC_MspInit+0xa8>)
 8000ab2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_ADC_MspInit+0xa8>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_ADC_MspInit+0xa8>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <HAL_ADC_MspInit+0xa8>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_ADC_MspInit+0xa8>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = PHOTORESISTOR_Pin|SOIL_Pin;
 8000adc:	2303      	movs	r3, #3
 8000ade:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ae0:	230b      	movs	r3, #11
 8000ae2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af2:	f001 fcc1 	bl	8002478 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3778      	adds	r7, #120	; 0x78
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	50040000 	.word	0x50040000
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b09e      	sub	sp, #120	; 0x78
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2254      	movs	r2, #84	; 0x54
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 fcf1 	bl	8004510 <memset>
  if(hi2c->Instance==I2C1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a1f      	ldr	r2, [pc, #124]	; (8000bb0 <HAL_I2C_MspInit+0xa8>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d137      	bne.n	8000ba8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b38:	2340      	movs	r3, #64	; 0x40
 8000b3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 f9d1 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b50:	f7ff ff5a 	bl	8000a08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <HAL_I2C_MspInit+0xac>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b58:	4a16      	ldr	r2, [pc, #88]	; (8000bb4 <HAL_I2C_MspInit+0xac>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_I2C_MspInit+0xac>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b6c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b70:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b72:	2312      	movs	r3, #18
 8000b74:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f001 fc74 	bl	8002478 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_I2C_MspInit+0xac>)
 8000b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <HAL_I2C_MspInit+0xac>)
 8000b96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <HAL_I2C_MspInit+0xac>)
 8000b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ba8:	bf00      	nop
 8000baa:	3778      	adds	r7, #120	; 0x78
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40005400 	.word	0x40005400
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f8d0 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000c10:	2008      	movs	r0, #8
 8000c12:	f001 fdcd 	bl	80027b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c24:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <_sbrk+0x5c>)
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <_sbrk+0x60>)
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <_sbrk+0x64>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <_sbrk+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d207      	bcs.n	8000c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c4c:	f003 fc36 	bl	80044bc <__errno>
 8000c50:	4603      	mov	r3, r0
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c5a:	e009      	b.n	8000c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <_sbrk+0x64>)
 8000c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20010000 	.word	0x20010000
 8000c7c:	00000400 	.word	0x00000400
 8000c80:	20000184 	.word	0x20000184
 8000c84:	200001a0 	.word	0x200001a0

08000c88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SystemInit+0x20>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <SystemInit+0x20>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb0:	f7ff ffea 	bl	8000c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb6:	490d      	ldr	r1, [pc, #52]	; (8000cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <LoopForever+0xe>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	; (8000cf8 <LoopForever+0x16>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cda:	f003 fbf5 	bl	80044c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cde:	f7ff fc11 	bl	8000504 <main>

08000ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cf0:	08004f20 	.word	0x08004f20
  ldr r2, =_sbss
 8000cf4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cf8:	2000019c 	.word	0x2000019c

08000cfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_IRQHandler>

08000cfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f001 fb73 	bl	80023f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f000 f80e 	bl	8000d30 <HAL_InitTick>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	71fb      	strb	r3, [r7, #7]
 8000d1e:	e001      	b.n	8000d24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d20:	f7ff fe78 	bl	8000a14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d24:	79fb      	ldrb	r3, [r7, #7]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_InitTick+0x6c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d023      	beq.n	8000d8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_InitTick+0x70>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_InitTick+0x6c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f001 fb7f 	bl	800245e <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10f      	bne.n	8000d86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d809      	bhi.n	8000d80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d74:	f001 fb49 	bl	800240a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d78:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_InitTick+0x74>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e007      	b.n	8000d90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
 8000d84:	e004      	b.n	8000d90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	73fb      	strb	r3, [r7, #15]
 8000d8a:	e001      	b.n	8000d90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000000c 	.word	0x2000000c
 8000da0:	20000004 	.word	0x20000004
 8000da4:	20000008 	.word	0x20000008

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	2000000c 	.word	0x2000000c
 8000dcc:	20000188 	.word	0x20000188

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000188 	.word	0x20000188

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_Delay+0x44>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000000c 	.word	0x2000000c

08000e30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	609a      	str	r2, [r3, #8]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b087      	sub	sp, #28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	3360      	adds	r3, #96	; 0x60
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <LL_ADC_SetOffset+0x44>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ed0:	bf00      	nop
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	03fff000 	.word	0x03fff000

08000ee0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3360      	adds	r3, #96	; 0x60
 8000eee:	461a      	mov	r2, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b087      	sub	sp, #28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3360      	adds	r3, #96	; 0x60
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	431a      	orrs	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f36:	bf00      	nop
 8000f38:	371c      	adds	r7, #28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3330      	adds	r3, #48	; 0x30
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	4413      	add	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	f003 031f 	and.w	r3, r3, #31
 8000f92:	211f      	movs	r1, #31
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	0e9b      	lsrs	r3, r3, #26
 8000fa0:	f003 011f 	and.w	r1, r3, #31
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	f003 031f 	and.w	r3, r3, #31
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fb4:	bf00      	nop
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b087      	sub	sp, #28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3314      	adds	r3, #20
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	0e5b      	lsrs	r3, r3, #25
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	4413      	add	r3, r2
 8000fde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	0d1b      	lsrs	r3, r3, #20
 8000fe8:	f003 031f 	and.w	r3, r3, #31
 8000fec:	2107      	movs	r1, #7
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	0d1b      	lsrs	r3, r3, #20
 8000ffa:	f003 031f 	and.w	r3, r3, #31
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	fa01 f303 	lsl.w	r3, r1, r3
 8001004:	431a      	orrs	r2, r3
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800100a:	bf00      	nop
 800100c:	371c      	adds	r7, #28
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001030:	43db      	mvns	r3, r3
 8001032:	401a      	ands	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0318 	and.w	r3, r3, #24
 800103a:	4908      	ldr	r1, [pc, #32]	; (800105c <LL_ADC_SetChannelSingleDiff+0x44>)
 800103c:	40d9      	lsrs	r1, r3
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	400b      	ands	r3, r1
 8001042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001046:	431a      	orrs	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	0007ffff 	.word	0x0007ffff

08001060 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001070:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6093      	str	r3, [r2, #8]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001098:	d101      	bne.n	800109e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010e8:	d101      	bne.n	80010ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800110c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001110:	f043 0201 	orr.w	r2, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001134:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001138:	f043 0202 	orr.w	r2, r3, #2
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <LL_ADC_IsEnabled+0x18>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <LL_ADC_IsEnabled+0x1a>
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b02      	cmp	r3, #2
 8001184:	d101      	bne.n	800118a <LL_ADC_IsDisableOngoing+0x18>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <LL_ADC_IsDisableOngoing+0x1a>
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011ac:	f043 0204 	orr.w	r2, r3, #4
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d4:	f043 0210 	orr.w	r2, r3, #16
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d101      	bne.n	8001200 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800121e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001222:	f043 0220 	orr.w	r2, r3, #32
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b08      	cmp	r3, #8
 8001248:	d101      	bne.n	800124e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e12c      	b.n	80014d0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001280:	2b00      	cmp	r3, #0
 8001282:	d109      	bne.n	8001298 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff fbe9 	bl	8000a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fef1 	bl	8001084 <LL_ADC_IsDeepPowerDownEnabled>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fed7 	bl	8001060 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff0c 	bl	80010d4 <LL_ADC_IsInternalRegulatorEnabled>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d115      	bne.n	80012ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fef0 	bl	80010ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012cc:	4b82      	ldr	r3, [pc, #520]	; (80014d8 <HAL_ADC_Init+0x27c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	099b      	lsrs	r3, r3, #6
 80012d2:	4a82      	ldr	r2, [pc, #520]	; (80014dc <HAL_ADC_Init+0x280>)
 80012d4:	fba2 2303 	umull	r2, r3, r2, r3
 80012d8:	099b      	lsrs	r3, r3, #6
 80012da:	3301      	adds	r3, #1
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012e0:	e002      	b.n	80012e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f9      	bne.n	80012e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff feee 	bl	80010d4 <LL_ADC_IsInternalRegulatorEnabled>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10d      	bne.n	800131a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001302:	f043 0210 	orr.w	r2, r3, #16
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	f043 0201 	orr.w	r2, r3, #1
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff62 	bl	80011e8 <LL_ADC_REG_IsConversionOngoing>
 8001324:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	2b00      	cmp	r3, #0
 8001330:	f040 80c5 	bne.w	80014be <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2b00      	cmp	r3, #0
 8001338:	f040 80c1 	bne.w	80014be <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001340:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001344:	f043 0202 	orr.w	r2, r3, #2
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fefb 	bl	800114c <LL_ADC_IsEnabled>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10b      	bne.n	8001374 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800135c:	4860      	ldr	r0, [pc, #384]	; (80014e0 <HAL_ADC_Init+0x284>)
 800135e:	f7ff fef5 	bl	800114c <LL_ADC_IsEnabled>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d105      	bne.n	8001374 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	4619      	mov	r1, r3
 800136e:	485d      	ldr	r0, [pc, #372]	; (80014e4 <HAL_ADC_Init+0x288>)
 8001370:	f7ff fd5e 	bl	8000e30 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7e5b      	ldrb	r3, [r3, #25]
 8001378:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800137e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001384:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800138a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001392:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d106      	bne.n	80013b0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a6:	3b01      	subs	r3, #1
 80013a8:	045b      	lsls	r3, r3, #17
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d009      	beq.n	80013cc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <HAL_ADC_Init+0x28c>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	69b9      	ldr	r1, [r7, #24]
 80013dc:	430b      	orrs	r3, r1
 80013de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff feff 	bl	80011e8 <LL_ADC_REG_IsConversionOngoing>
 80013ea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff20 	bl	8001236 <LL_ADC_INJ_IsConversionOngoing>
 80013f6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d13d      	bne.n	800147a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d13a      	bne.n	800147a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001408:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001410:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001420:	f023 0302 	bic.w	r3, r3, #2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	69b9      	ldr	r1, [r7, #24]
 800142a:	430b      	orrs	r3, r1
 800142c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001434:	2b01      	cmp	r3, #1
 8001436:	d118      	bne.n	800146a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001442:	f023 0304 	bic.w	r3, r3, #4
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800144e:	4311      	orrs	r1, r2
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001454:	4311      	orrs	r1, r2
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800145a:	430a      	orrs	r2, r1
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	e007      	b.n	800147a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0201 	bic.w	r2, r2, #1
 8001478:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d10c      	bne.n	800149c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	f023 010f 	bic.w	r1, r3, #15
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	1e5a      	subs	r2, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	631a      	str	r2, [r3, #48]	; 0x30
 800149a:	e007      	b.n	80014ac <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 020f 	bic.w	r2, r2, #15
 80014aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b0:	f023 0303 	bic.w	r3, r3, #3
 80014b4:	f043 0201 	orr.w	r2, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	655a      	str	r2, [r3, #84]	; 0x54
 80014bc:	e007      	b.n	80014ce <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c2:	f043 0210 	orr.w	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000004 	.word	0x20000004
 80014dc:	053e2d63 	.word	0x053e2d63
 80014e0:	50040000 	.word	0x50040000
 80014e4:	50040300 	.word	0x50040300
 80014e8:	fff0c007 	.word	0xfff0c007

080014ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fe75 	bl	80011e8 <LL_ADC_REG_IsConversionOngoing>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d14f      	bne.n	80015a4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800150a:	2b01      	cmp	r3, #1
 800150c:	d101      	bne.n	8001512 <HAL_ADC_Start+0x26>
 800150e:	2302      	movs	r3, #2
 8001510:	e04b      	b.n	80015aa <HAL_ADC_Start+0xbe>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 fdb4 	bl	8002088 <ADC_Enable>
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d137      	bne.n	800159a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001532:	f023 0301 	bic.w	r3, r3, #1
 8001536:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800154a:	d106      	bne.n	800155a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001550:	f023 0206 	bic.w	r2, r3, #6
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	659a      	str	r2, [r3, #88]	; 0x58
 8001558:	e002      	b.n	8001560 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	221c      	movs	r2, #28
 8001566:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d007      	beq.n	800158e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001582:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001586:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fe00 	bl	8001198 <LL_ADC_REG_StartConversion>
 8001598:	e006      	b.n	80015a8 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80015a2:	e001      	b.n	80015a8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015a4:	2302      	movs	r3, #2
 80015a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_Stop+0x16>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e023      	b.n	8001610 <HAL_ADC_Stop+0x5e>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80015d0:	2103      	movs	r1, #3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fc9c 	bl	8001f10 <ADC_ConversionStop>
 80015d8:	4603      	mov	r3, r0
 80015da:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d111      	bne.n	8001606 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 fdd6 	bl	8002194 <ADC_Disable>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	f043 0201 	orr.w	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	2b08      	cmp	r3, #8
 8001628:	d102      	bne.n	8001630 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800162a:	2308      	movs	r3, #8
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e010      	b.n	8001652 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001642:	f043 0220 	orr.w	r2, r3, #32
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e06f      	b.n	800172e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800164e:	2304      	movs	r3, #4
 8001650:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001652:	f7ff fbbd 	bl	8000dd0 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001658:	e021      	b.n	800169e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001660:	d01d      	beq.n	800169e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001662:	f7ff fbb5 	bl	8000dd0 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d302      	bcc.n	8001678 <HAL_ADC_PollForConversion+0x60>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d112      	bne.n	800169e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	4013      	ands	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10b      	bne.n	800169e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168a:	f043 0204 	orr.w	r2, r3, #4
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e047      	b.n	800172e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0d6      	beq.n	800165a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fc40 	bl	8000f42 <LL_ADC_REG_IsTriggerSourceSWStart>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01c      	beq.n	8001702 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7e5b      	ldrb	r3, [r3, #25]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d118      	bne.n	8001702 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d111      	bne.n	8001702 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d105      	bne.n	8001702 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fa:	f043 0201 	orr.w	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b08      	cmp	r3, #8
 800170e:	d104      	bne.n	800171a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2208      	movs	r2, #8
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	e008      	b.n	800172c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d103      	bne.n	800172c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	220c      	movs	r2, #12
 800172a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0b6      	sub	sp, #216	; 0xd8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800176a:	2b01      	cmp	r3, #1
 800176c:	d101      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x22>
 800176e:	2302      	movs	r3, #2
 8001770:	e3b9      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x796>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fd32 	bl	80011e8 <LL_ADC_REG_IsConversionOngoing>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 839e 	bne.w	8001ec8 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b05      	cmp	r3, #5
 8001792:	d824      	bhi.n	80017de <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	3b02      	subs	r3, #2
 800179a:	2b03      	cmp	r3, #3
 800179c:	d81b      	bhi.n	80017d6 <HAL_ADC_ConfigChannel+0x86>
 800179e:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <HAL_ADC_ConfigChannel+0x54>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	080017b5 	.word	0x080017b5
 80017a8:	080017bd 	.word	0x080017bd
 80017ac:	080017c5 	.word	0x080017c5
 80017b0:	080017cd 	.word	0x080017cd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	220c      	movs	r2, #12
 80017b8:	605a      	str	r2, [r3, #4]
          break;
 80017ba:	e011      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2212      	movs	r2, #18
 80017c0:	605a      	str	r2, [r3, #4]
          break;
 80017c2:	e00d      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	2218      	movs	r2, #24
 80017c8:	605a      	str	r2, [r3, #4]
          break;
 80017ca:	e009      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d2:	605a      	str	r2, [r3, #4]
          break;
 80017d4:	e004      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2206      	movs	r2, #6
 80017da:	605a      	str	r2, [r3, #4]
          break;
 80017dc:	e000      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80017de:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	f7ff fbbb 	bl	8000f68 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fcf6 	bl	80011e8 <LL_ADC_REG_IsConversionOngoing>
 80017fc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fd16 	bl	8001236 <LL_ADC_INJ_IsConversionOngoing>
 800180a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800180e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 81a6 	bne.w	8001b64 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001818:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800181c:	2b00      	cmp	r3, #0
 800181e:	f040 81a1 	bne.w	8001b64 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	6819      	ldr	r1, [r3, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	461a      	mov	r2, r3
 8001830:	f7ff fbc6 	bl	8000fc0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	08db      	lsrs	r3, r3, #3
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	2b04      	cmp	r3, #4
 8001854:	d00a      	beq.n	800186c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	6919      	ldr	r1, [r3, #16]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001866:	f7ff fb17 	bl	8000e98 <LL_ADC_SetOffset>
 800186a:	e17b      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fb34 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 8001878:	4603      	mov	r3, r0
 800187a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10a      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x148>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fb29 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	0e9b      	lsrs	r3, r3, #26
 8001892:	f003 021f 	and.w	r2, r3, #31
 8001896:	e01e      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x186>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fb1e 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80018c6:	2320      	movs	r3, #32
 80018c8:	e004      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80018ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018ce:	fab3 f383 	clz	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d105      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x19e>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	0e9b      	lsrs	r3, r3, #26
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	e018      	b.n	8001920 <HAL_ADC_ConfigChannel+0x1d0>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018fa:	fa93 f3a3 	rbit	r3, r3
 80018fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001906:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800190a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001912:	2320      	movs	r3, #32
 8001914:	e004      	b.n	8001920 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001916:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001920:	429a      	cmp	r2, r3
 8001922:	d106      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2200      	movs	r2, #0
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff faed 	bl	8000f0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2101      	movs	r1, #1
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fad1 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10a      	bne.n	800195e <HAL_ADC_ConfigChannel+0x20e>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2101      	movs	r1, #1
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fac6 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	0e9b      	lsrs	r3, r3, #26
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	e01e      	b.n	800199c <HAL_ADC_ConfigChannel+0x24c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2101      	movs	r1, #1
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fabb 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001974:	fa93 f3a3 	rbit	r3, r3
 8001978:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800197c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800198c:	2320      	movs	r3, #32
 800198e:	e004      	b.n	800199a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001990:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001994:	fab3 f383 	clz	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d105      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x264>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0e9b      	lsrs	r3, r3, #26
 80019ae:	f003 031f 	and.w	r3, r3, #31
 80019b2:	e018      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x296>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80019c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80019d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80019d8:	2320      	movs	r3, #32
 80019da:	e004      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80019dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d106      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2200      	movs	r2, #0
 80019f0:	2101      	movs	r1, #1
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fa8a 	bl	8000f0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2102      	movs	r1, #2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fa6e 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10a      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x2d4>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2102      	movs	r1, #2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fa63 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	0e9b      	lsrs	r3, r3, #26
 8001a1e:	f003 021f 	and.w	r2, r3, #31
 8001a22:	e01e      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x312>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2102      	movs	r1, #2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fa58 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a3a:	fa93 f3a3 	rbit	r3, r3
 8001a3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001a52:	2320      	movs	r3, #32
 8001a54:	e004      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001a56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d105      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x32a>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	0e9b      	lsrs	r3, r3, #26
 8001a74:	f003 031f 	and.w	r3, r3, #31
 8001a78:	e016      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x358>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	e004      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001a9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d106      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fa29 	bl	8000f0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2103      	movs	r1, #3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fa0d 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10a      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x396>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2103      	movs	r1, #3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fa02 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	0e9b      	lsrs	r3, r3, #26
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	e017      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x3c6>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2103      	movs	r1, #3
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff f9f7 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b00:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	e003      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d105      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x3de>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	0e9b      	lsrs	r3, r3, #26
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	e011      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x402>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001b46:	2320      	movs	r3, #32
 8001b48:	e003      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d106      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2103      	movs	r1, #3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f9d4 	bl	8000f0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff faef 	bl	800114c <LL_ADC_IsEnabled>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f040 813f 	bne.w	8001df4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	461a      	mov	r2, r3
 8001b84:	f7ff fa48 	bl	8001018 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4a8e      	ldr	r2, [pc, #568]	; (8001dc8 <HAL_ADC_ConfigChannel+0x678>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	f040 8130 	bne.w	8001df4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10b      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x46c>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	0e9b      	lsrs	r3, r3, #26
 8001baa:	3301      	adds	r3, #1
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	2b09      	cmp	r3, #9
 8001bb2:	bf94      	ite	ls
 8001bb4:	2301      	movls	r3, #1
 8001bb6:	2300      	movhi	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e019      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x4a0>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001bca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bcc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	e003      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001bd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	3301      	adds	r3, #1
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	2b09      	cmp	r3, #9
 8001be8:	bf94      	ite	ls
 8001bea:	2301      	movls	r3, #1
 8001bec:	2300      	movhi	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d079      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d107      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x4c0>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0e9b      	lsrs	r3, r3, #26
 8001c06:	3301      	adds	r3, #1
 8001c08:	069b      	lsls	r3, r3, #26
 8001c0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c0e:	e015      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x4ec>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c20:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001c28:	2320      	movs	r3, #32
 8001c2a:	e003      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	3301      	adds	r3, #1
 8001c36:	069b      	lsls	r3, r3, #26
 8001c38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x50c>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0e9b      	lsrs	r3, r3, #26
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	2101      	movs	r1, #1
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	e017      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x53c>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c6c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001c74:	2320      	movs	r3, #32
 8001c76:	e003      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	3301      	adds	r3, #1
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	2101      	movs	r1, #1
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	ea42 0103 	orr.w	r1, r2, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10a      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x562>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0e9b      	lsrs	r3, r3, #26
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	051b      	lsls	r3, r3, #20
 8001cb0:	e018      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x594>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	e003      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cd0:	fab3 f383 	clz	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	e080      	b.n	8001dea <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d107      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x5b4>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0e9b      	lsrs	r3, r3, #26
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	069b      	lsls	r3, r3, #26
 8001cfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d02:	e015      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x5e0>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	e003      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	3301      	adds	r3, #1
 8001d2a:	069b      	lsls	r3, r3, #26
 8001d2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d109      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x600>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	0e9b      	lsrs	r3, r3, #26
 8001d42:	3301      	adds	r3, #1
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	e017      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x630>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	61fb      	str	r3, [r7, #28]
  return result;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001d68:	2320      	movs	r3, #32
 8001d6a:	e003      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	ea42 0103 	orr.w	r1, r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10d      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x65c>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0e9b      	lsrs	r3, r3, #26
 8001d96:	3301      	adds	r3, #1
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	3b1e      	subs	r3, #30
 8001da4:	051b      	lsls	r3, r3, #20
 8001da6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001daa:	e01d      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x698>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	613b      	str	r3, [r7, #16]
  return result;
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d103      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	e005      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x684>
 8001dc8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f003 021f 	and.w	r2, r3, #31
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	3b1e      	subs	r3, #30
 8001de2:	051b      	lsls	r3, r3, #20
 8001de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001de8:	430b      	orrs	r3, r1
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	6892      	ldr	r2, [r2, #8]
 8001dee:	4619      	mov	r1, r3
 8001df0:	f7ff f8e6 	bl	8000fc0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <HAL_ADC_ConfigChannel+0x7a0>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d06c      	beq.n	8001eda <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e00:	483c      	ldr	r0, [pc, #240]	; (8001ef4 <HAL_ADC_ConfigChannel+0x7a4>)
 8001e02:	f7ff f83b 	bl	8000e7c <LL_ADC_GetCommonPathInternalCh>
 8001e06:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a3a      	ldr	r2, [pc, #232]	; (8001ef8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d127      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d121      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a35      	ldr	r2, [pc, #212]	; (8001efc <HAL_ADC_ConfigChannel+0x7ac>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d157      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e32:	4619      	mov	r1, r3
 8001e34:	482f      	ldr	r0, [pc, #188]	; (8001ef4 <HAL_ADC_ConfigChannel+0x7a4>)
 8001e36:	f7ff f80e 	bl	8000e56 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e3a:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HAL_ADC_ConfigChannel+0x7b0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	099b      	lsrs	r3, r3, #6
 8001e40:	4a30      	ldr	r2, [pc, #192]	; (8001f04 <HAL_ADC_ConfigChannel+0x7b4>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	099b      	lsrs	r3, r3, #6
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e54:	e002      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f9      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e62:	e03a      	b.n	8001eda <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a27      	ldr	r2, [pc, #156]	; (8001f08 <HAL_ADC_ConfigChannel+0x7b8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d113      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x746>
 8001e6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10d      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <HAL_ADC_ConfigChannel+0x7ac>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d12a      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4819      	ldr	r0, [pc, #100]	; (8001ef4 <HAL_ADC_ConfigChannel+0x7a4>)
 8001e90:	f7fe ffe1 	bl	8000e56 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e94:	e021      	b.n	8001eda <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1c      	ldr	r2, [pc, #112]	; (8001f0c <HAL_ADC_ConfigChannel+0x7bc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d11c      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ea0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d116      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a12      	ldr	r2, [pc, #72]	; (8001efc <HAL_ADC_ConfigChannel+0x7ac>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d111      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480c      	ldr	r0, [pc, #48]	; (8001ef4 <HAL_ADC_ConfigChannel+0x7a4>)
 8001ec2:	f7fe ffc8 	bl	8000e56 <LL_ADC_SetCommonPathInternalCh>
 8001ec6:	e008      	b.n	8001eda <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ecc:	f043 0220 	orr.w	r2, r3, #32
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ee2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	37d8      	adds	r7, #216	; 0xd8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	80080000 	.word	0x80080000
 8001ef4:	50040300 	.word	0x50040300
 8001ef8:	c7520000 	.word	0xc7520000
 8001efc:	50040000 	.word	0x50040000
 8001f00:	20000004 	.word	0x20000004
 8001f04:	053e2d63 	.word	0x053e2d63
 8001f08:	cb840000 	.word	0xcb840000
 8001f0c:	80000001 	.word	0x80000001

08001f10 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff f95e 	bl	80011e8 <LL_ADC_REG_IsConversionOngoing>
 8001f2c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff f97f 	bl	8001236 <LL_ADC_INJ_IsConversionOngoing>
 8001f38:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d103      	bne.n	8001f48 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8098 	beq.w	8002078 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d02a      	beq.n	8001fac <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	7e5b      	ldrb	r3, [r3, #25]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d126      	bne.n	8001fac <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	7e1b      	ldrb	r3, [r3, #24]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d122      	bne.n	8001fac <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001f66:	2301      	movs	r3, #1
 8001f68:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001f6a:	e014      	b.n	8001f96 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	4a45      	ldr	r2, [pc, #276]	; (8002084 <ADC_ConversionStop+0x174>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d90d      	bls.n	8001f90 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f78:	f043 0210 	orr.w	r2, r3, #16
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f043 0201 	orr.w	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e074      	b.n	800207a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	3301      	adds	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa0:	2b40      	cmp	r3, #64	; 0x40
 8001fa2:	d1e3      	bne.n	8001f6c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2240      	movs	r2, #64	; 0x40
 8001faa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d014      	beq.n	8001fdc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff f916 	bl	80011e8 <LL_ADC_REG_IsConversionOngoing>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00c      	beq.n	8001fdc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff f8d3 	bl	8001172 <LL_ADC_IsDisableOngoing>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d104      	bne.n	8001fdc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff f8f2 	bl	80011c0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d014      	beq.n	800200c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f925 	bl	8001236 <LL_ADC_INJ_IsConversionOngoing>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00c      	beq.n	800200c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f8bb 	bl	8001172 <LL_ADC_IsDisableOngoing>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d104      	bne.n	800200c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff f901 	bl	800120e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d005      	beq.n	800201e <ADC_ConversionStop+0x10e>
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	2b03      	cmp	r3, #3
 8002016:	d105      	bne.n	8002024 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002018:	230c      	movs	r3, #12
 800201a:	617b      	str	r3, [r7, #20]
        break;
 800201c:	e005      	b.n	800202a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800201e:	2308      	movs	r3, #8
 8002020:	617b      	str	r3, [r7, #20]
        break;
 8002022:	e002      	b.n	800202a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002024:	2304      	movs	r3, #4
 8002026:	617b      	str	r3, [r7, #20]
        break;
 8002028:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800202a:	f7fe fed1 	bl	8000dd0 <HAL_GetTick>
 800202e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002030:	e01b      	b.n	800206a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002032:	f7fe fecd 	bl	8000dd0 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b05      	cmp	r3, #5
 800203e:	d914      	bls.n	800206a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00d      	beq.n	800206a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f043 0210 	orr.w	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e007      	b.n	800207a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1dc      	bne.n	8002032 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3720      	adds	r7, #32
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	a33fffff 	.word	0xa33fffff

08002088 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f857 	bl	800114c <LL_ADC_IsEnabled>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d169      	bne.n	8002178 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	4b36      	ldr	r3, [pc, #216]	; (8002184 <ADC_Enable+0xfc>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00d      	beq.n	80020ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b6:	f043 0210 	orr.w	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	f043 0201 	orr.w	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e055      	b.n	800217a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f812 	bl	80010fc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80020d8:	482b      	ldr	r0, [pc, #172]	; (8002188 <ADC_Enable+0x100>)
 80020da:	f7fe fecf 	bl	8000e7c <LL_ADC_GetCommonPathInternalCh>
 80020de:	4603      	mov	r3, r0
 80020e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d013      	beq.n	8002110 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020e8:	4b28      	ldr	r3, [pc, #160]	; (800218c <ADC_Enable+0x104>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	099b      	lsrs	r3, r3, #6
 80020ee:	4a28      	ldr	r2, [pc, #160]	; (8002190 <ADC_Enable+0x108>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	099b      	lsrs	r3, r3, #6
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002102:	e002      	b.n	800210a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	3b01      	subs	r3, #1
 8002108:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f9      	bne.n	8002104 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002110:	f7fe fe5e 	bl	8000dd0 <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002116:	e028      	b.n	800216a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff f815 	bl	800114c <LL_ADC_IsEnabled>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d104      	bne.n	8002132 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe ffe5 	bl	80010fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002132:	f7fe fe4d 	bl	8000dd0 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d914      	bls.n	800216a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d00d      	beq.n	800216a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	f043 0210 	orr.w	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	f043 0201 	orr.w	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e007      	b.n	800217a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	d1cf      	bne.n	8002118 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	8000003f 	.word	0x8000003f
 8002188:	50040300 	.word	0x50040300
 800218c:	20000004 	.word	0x20000004
 8002190:	053e2d63 	.word	0x053e2d63

08002194 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe ffe6 	bl	8001172 <LL_ADC_IsDisableOngoing>
 80021a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe ffcd 	bl	800114c <LL_ADC_IsEnabled>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d047      	beq.n	8002248 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d144      	bne.n	8002248 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030d 	and.w	r3, r3, #13
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d10c      	bne.n	80021e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe ffa7 	bl	8001124 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2203      	movs	r2, #3
 80021dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021de:	f7fe fdf7 	bl	8000dd0 <HAL_GetTick>
 80021e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021e4:	e029      	b.n	800223a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ea:	f043 0210 	orr.w	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e023      	b.n	800224a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002202:	f7fe fde5 	bl	8000dd0 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d914      	bls.n	800223a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00d      	beq.n	800223a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f043 0210 	orr.w	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e007      	b.n	800224a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1dc      	bne.n	8002202 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db0b      	blt.n	80022e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	4907      	ldr	r1, [pc, #28]	; (80022f0 <__NVIC_EnableIRQ+0x38>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2001      	movs	r0, #1
 80022da:	fa00 f202 	lsl.w	r2, r0, r2
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000e100 	.word	0xe000e100

080022f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	2b00      	cmp	r3, #0
 8002306:	db0a      	blt.n	800231e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	490c      	ldr	r1, [pc, #48]	; (8002340 <__NVIC_SetPriority+0x4c>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	0112      	lsls	r2, r2, #4
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	440b      	add	r3, r1
 8002318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800231c:	e00a      	b.n	8002334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4908      	ldr	r1, [pc, #32]	; (8002344 <__NVIC_SetPriority+0x50>)
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	3b04      	subs	r3, #4
 800232c:	0112      	lsls	r2, r2, #4
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	440b      	add	r3, r1
 8002332:	761a      	strb	r2, [r3, #24]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f1c3 0307 	rsb	r3, r3, #7
 8002362:	2b04      	cmp	r3, #4
 8002364:	bf28      	it	cs
 8002366:	2304      	movcs	r3, #4
 8002368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3304      	adds	r3, #4
 800236e:	2b06      	cmp	r3, #6
 8002370:	d902      	bls.n	8002378 <NVIC_EncodePriority+0x30>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3b03      	subs	r3, #3
 8002376:	e000      	b.n	800237a <NVIC_EncodePriority+0x32>
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	401a      	ands	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002390:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	43d9      	mvns	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	4313      	orrs	r3, r2
         );
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3724      	adds	r7, #36	; 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c0:	d301      	bcc.n	80023c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00f      	b.n	80023e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <SysTick_Config+0x40>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ce:	210f      	movs	r1, #15
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023d4:	f7ff ff8e 	bl	80022f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <SysTick_Config+0x40>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023de:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <SysTick_Config+0x40>)
 80023e0:	2207      	movs	r2, #7
 80023e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	e000e010 	.word	0xe000e010

080023f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff29 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800241c:	f7ff ff3e 	bl	800229c <__NVIC_GetPriorityGrouping>
 8002420:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	6978      	ldr	r0, [r7, #20]
 8002428:	f7ff ff8e 	bl	8002348 <NVIC_EncodePriority>
 800242c:	4602      	mov	r2, r0
 800242e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff5d 	bl	80022f4 <__NVIC_SetPriority>
}
 800243a:	bf00      	nop
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff31 	bl	80022b8 <__NVIC_EnableIRQ>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ffa2 	bl	80023b0 <SysTick_Config>
 800246c:	4603      	mov	r3, r0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002486:	e148      	b.n	800271a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2101      	movs	r1, #1
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	fa01 f303 	lsl.w	r3, r1, r3
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 813a 	beq.w	8002714 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d005      	beq.n	80024b8 <HAL_GPIO_Init+0x40>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d130      	bne.n	800251a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ee:	2201      	movs	r2, #1
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 0201 	and.w	r2, r3, #1
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b03      	cmp	r3, #3
 8002524:	d017      	beq.n	8002556 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d123      	bne.n	80025aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	08da      	lsrs	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3208      	adds	r2, #8
 800256a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	220f      	movs	r2, #15
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4013      	ands	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	08da      	lsrs	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3208      	adds	r2, #8
 80025a4:	6939      	ldr	r1, [r7, #16]
 80025a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	2203      	movs	r2, #3
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 0203 	and.w	r2, r3, #3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8094 	beq.w	8002714 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ec:	4b52      	ldr	r3, [pc, #328]	; (8002738 <HAL_GPIO_Init+0x2c0>)
 80025ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f0:	4a51      	ldr	r2, [pc, #324]	; (8002738 <HAL_GPIO_Init+0x2c0>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6613      	str	r3, [r2, #96]	; 0x60
 80025f8:	4b4f      	ldr	r3, [pc, #316]	; (8002738 <HAL_GPIO_Init+0x2c0>)
 80025fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002604:	4a4d      	ldr	r2, [pc, #308]	; (800273c <HAL_GPIO_Init+0x2c4>)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	3302      	adds	r3, #2
 800260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800262e:	d00d      	beq.n	800264c <HAL_GPIO_Init+0x1d4>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a43      	ldr	r2, [pc, #268]	; (8002740 <HAL_GPIO_Init+0x2c8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d007      	beq.n	8002648 <HAL_GPIO_Init+0x1d0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a42      	ldr	r2, [pc, #264]	; (8002744 <HAL_GPIO_Init+0x2cc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d101      	bne.n	8002644 <HAL_GPIO_Init+0x1cc>
 8002640:	2302      	movs	r3, #2
 8002642:	e004      	b.n	800264e <HAL_GPIO_Init+0x1d6>
 8002644:	2307      	movs	r3, #7
 8002646:	e002      	b.n	800264e <HAL_GPIO_Init+0x1d6>
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <HAL_GPIO_Init+0x1d6>
 800264c:	2300      	movs	r3, #0
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	f002 0203 	and.w	r2, r2, #3
 8002654:	0092      	lsls	r2, r2, #2
 8002656:	4093      	lsls	r3, r2
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800265e:	4937      	ldr	r1, [pc, #220]	; (800273c <HAL_GPIO_Init+0x2c4>)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	3302      	adds	r3, #2
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800266c:	4b36      	ldr	r3, [pc, #216]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	43db      	mvns	r3, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002690:	4a2d      	ldr	r2, [pc, #180]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002696:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	43db      	mvns	r3, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026ba:	4a23      	ldr	r2, [pc, #140]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026c0:	4b21      	ldr	r3, [pc, #132]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4013      	ands	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026e4:	4a18      	ldr	r2, [pc, #96]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026ea:	4b17      	ldr	r3, [pc, #92]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800270e:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3301      	adds	r3, #1
 8002718:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	f47f aeaf 	bne.w	8002488 <HAL_GPIO_Init+0x10>
  }
}
 800272a:	bf00      	nop
 800272c:	bf00      	nop
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40021000 	.word	0x40021000
 800273c:	40010000 	.word	0x40010000
 8002740:	48000400 	.word	0x48000400
 8002744:	48000800 	.word	0x48000800
 8002748:	40010400 	.word	0x40010400

0800274c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
 8002758:	4613      	mov	r3, r2
 800275a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800275c:	787b      	ldrb	r3, [r7, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002768:	e002      	b.n	8002770 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4013      	ands	r3, r2
 8002794:	041a      	lsls	r2, r3, #16
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	43d9      	mvns	r1, r3
 800279a:	887b      	ldrh	r3, [r7, #2]
 800279c:	400b      	ands	r3, r1
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	619a      	str	r2, [r3, #24]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d006      	beq.n	80027d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027c6:	4a05      	ldr	r2, [pc, #20]	; (80027dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c8:	88fb      	ldrh	r3, [r7, #6]
 80027ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027cc:	88fb      	ldrh	r3, [r7, #6]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe f8e4 	bl	800099c <HAL_GPIO_EXTI_Callback>
  }
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40010400 	.word	0x40010400

080027e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e081      	b.n	80028f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe f97e 	bl	8000b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	; 0x24
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002830:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002840:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d107      	bne.n	800285a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	e006      	b.n	8002868 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002866:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d104      	bne.n	800287a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002878:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800288c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800289c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69d9      	ldr	r1, [r3, #28]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1a      	ldr	r2, [r3, #32]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	607a      	str	r2, [r7, #4]
 800290a:	461a      	mov	r2, r3
 800290c:	460b      	mov	r3, r1
 800290e:	817b      	strh	r3, [r7, #10]
 8002910:	4613      	mov	r3, r2
 8002912:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b20      	cmp	r3, #32
 800291e:	f040 80da 	bne.w	8002ad6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_I2C_Master_Transmit+0x30>
 800292c:	2302      	movs	r3, #2
 800292e:	e0d3      	b.n	8002ad8 <HAL_I2C_Master_Transmit+0x1d8>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002938:	f7fe fa4a 	bl	8000dd0 <HAL_GetTick>
 800293c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	2319      	movs	r3, #25
 8002944:	2201      	movs	r2, #1
 8002946:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f9f7 	bl	8002d3e <I2C_WaitOnFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0be      	b.n	8002ad8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2221      	movs	r2, #33	; 0x21
 800295e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2210      	movs	r2, #16
 8002966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	893a      	ldrh	r2, [r7, #8]
 800297a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	2bff      	cmp	r3, #255	; 0xff
 800298a:	d90e      	bls.n	80029aa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	22ff      	movs	r2, #255	; 0xff
 8002990:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002996:	b2da      	uxtb	r2, r3
 8002998:	8979      	ldrh	r1, [r7, #10]
 800299a:	4b51      	ldr	r3, [pc, #324]	; (8002ae0 <HAL_I2C_Master_Transmit+0x1e0>)
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fb74 	bl	8003090 <I2C_TransferConfig>
 80029a8:	e06c      	b.n	8002a84 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	8979      	ldrh	r1, [r7, #10]
 80029bc:	4b48      	ldr	r3, [pc, #288]	; (8002ae0 <HAL_I2C_Master_Transmit+0x1e0>)
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fb63 	bl	8003090 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80029ca:	e05b      	b.n	8002a84 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	6a39      	ldr	r1, [r7, #32]
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f9f4 	bl	8002dbe <I2C_WaitOnTXISFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e07b      	b.n	8002ad8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	781a      	ldrb	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d034      	beq.n	8002a84 <HAL_I2C_Master_Transmit+0x184>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d130      	bne.n	8002a84 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2180      	movs	r1, #128	; 0x80
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f986 	bl	8002d3e <I2C_WaitOnFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e04d      	b.n	8002ad8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2bff      	cmp	r3, #255	; 0xff
 8002a44:	d90e      	bls.n	8002a64 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	22ff      	movs	r2, #255	; 0xff
 8002a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	8979      	ldrh	r1, [r7, #10]
 8002a54:	2300      	movs	r3, #0
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fb17 	bl	8003090 <I2C_TransferConfig>
 8002a62:	e00f      	b.n	8002a84 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	8979      	ldrh	r1, [r7, #10]
 8002a76:	2300      	movs	r3, #0
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fb06 	bl	8003090 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d19e      	bne.n	80029cc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	6a39      	ldr	r1, [r7, #32]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f9d3 	bl	8002e3e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e01a      	b.n	8002ad8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002ab6:	400b      	ands	r3, r1
 8002ab8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	80002000 	.word	0x80002000
 8002ae4:	fe00e800 	.word	0xfe00e800

08002ae8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	; 0x28
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	460b      	mov	r3, r1
 8002af6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	f040 80f1 	bne.w	8002cec <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b18:	d101      	bne.n	8002b1e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e0e7      	b.n	8002cee <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_I2C_IsDeviceReady+0x44>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e0e0      	b.n	8002cee <HAL_I2C_IsDeviceReady+0x206>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2224      	movs	r2, #36	; 0x24
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d107      	bne.n	8002b5a <HAL_I2C_IsDeviceReady+0x72>
 8002b4a:	897b      	ldrh	r3, [r7, #10]
 8002b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b58:	e004      	b.n	8002b64 <HAL_I2C_IsDeviceReady+0x7c>
 8002b5a:	897b      	ldrh	r3, [r7, #10]
 8002b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b60:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002b6a:	f7fe f931 	bl	8000dd0 <HAL_GetTick>
 8002b6e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	bf0c      	ite	eq
 8002b7e:	2301      	moveq	r3, #1
 8002b80:	2300      	movne	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002b9c:	e034      	b.n	8002c08 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ba4:	d01a      	beq.n	8002bdc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ba6:	f7fe f913 	bl	8000dd0 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d302      	bcc.n	8002bbc <HAL_I2C_IsDeviceReady+0xd4>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10f      	bne.n	8002bdc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e088      	b.n	8002cee <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	bf0c      	ite	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	2300      	movne	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b10      	cmp	r3, #16
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002c08:	7ffb      	ldrb	r3, [r7, #31]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <HAL_I2C_IsDeviceReady+0x12c>
 8002c0e:	7fbb      	ldrb	r3, [r7, #30]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0c4      	beq.n	8002b9e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d01a      	beq.n	8002c58 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2120      	movs	r1, #32
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 f886 	bl	8002d3e <I2C_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e058      	b.n	8002cee <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2220      	movs	r2, #32
 8002c42:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e04a      	b.n	8002cee <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2120      	movs	r1, #32
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f86b 	bl	8002d3e <I2C_WaitOnFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e03d      	b.n	8002cee <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2210      	movs	r2, #16
 8002c78:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d118      	bne.n	8002cbc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c98:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2120      	movs	r1, #32
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f84a 	bl	8002d3e <I2C_WaitOnFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e01c      	b.n	8002cee <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	f63f af3b 	bhi.w	8002b42 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
  }
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d103      	bne.n	8002d14 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2200      	movs	r2, #0
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d007      	beq.n	8002d32 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699a      	ldr	r2, [r3, #24]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	619a      	str	r2, [r3, #24]
  }
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d4e:	e022      	b.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d56:	d01e      	beq.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d58:	f7fe f83a 	bl	8000dd0 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d302      	bcc.n	8002d6e <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d113      	bne.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f043 0220 	orr.w	r2, r3, #32
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e00f      	b.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699a      	ldr	r2, [r3, #24]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	bf0c      	ite	eq
 8002da6:	2301      	moveq	r3, #1
 8002da8:	2300      	movne	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d0cd      	beq.n	8002d50 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dca:	e02c      	b.n	8002e26 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f871 	bl	8002eb8 <I2C_IsErrorOccurred>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e02a      	b.n	8002e36 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de6:	d01e      	beq.n	8002e26 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de8:	f7fd fff2 	bl	8000dd0 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d302      	bcc.n	8002dfe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d113      	bne.n	8002e26 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	f043 0220 	orr.w	r2, r3, #32
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e007      	b.n	8002e36 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d1cb      	bne.n	8002dcc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e4a:	e028      	b.n	8002e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f831 	bl	8002eb8 <I2C_IsErrorOccurred>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e026      	b.n	8002eae <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e60:	f7fd ffb6 	bl	8000dd0 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d302      	bcc.n	8002e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d113      	bne.n	8002e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	f043 0220 	orr.w	r2, r3, #32
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e007      	b.n	8002eae <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d1cf      	bne.n	8002e4c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d075      	beq.n	8002fd0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2210      	movs	r2, #16
 8002eea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002eec:	e056      	b.n	8002f9c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef4:	d052      	beq.n	8002f9c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ef6:	f7fd ff6b 	bl	8000dd0 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d302      	bcc.n	8002f0c <I2C_IsErrorOccurred+0x54>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d147      	bne.n	8002f9c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f2e:	d12e      	bne.n	8002f8e <I2C_IsErrorOccurred+0xd6>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f36:	d02a      	beq.n	8002f8e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d027      	beq.n	8002f8e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f4e:	f7fd ff3f 	bl	8000dd0 <HAL_GetTick>
 8002f52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f54:	e01b      	b.n	8002f8e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f56:	f7fd ff3b 	bl	8000dd0 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b19      	cmp	r3, #25
 8002f62:	d914      	bls.n	8002f8e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f68:	f043 0220 	orr.w	r2, r3, #32
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d1dc      	bne.n	8002f56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b20      	cmp	r3, #32
 8002fa8:	d003      	beq.n	8002fb2 <I2C_IsErrorOccurred+0xfa>
 8002faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d09d      	beq.n	8002eee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d103      	bne.n	8002fc2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	f043 0304 	orr.w	r3, r3, #4
 8002fc8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ff2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00b      	beq.n	800301c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	f043 0308 	orr.w	r3, r3, #8
 800300a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003014:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	f043 0302 	orr.w	r3, r3, #2
 800302c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003036:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800303e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01c      	beq.n	8003080 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff fe55 	bl	8002cf6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <I2C_IsErrorOccurred+0x1d4>)
 8003058:	400b      	ands	r3, r1
 800305a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	431a      	orrs	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003084:	4618      	mov	r0, r3
 8003086:	3728      	adds	r7, #40	; 0x28
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	fe00e800 	.word	0xfe00e800

08003090 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	817b      	strh	r3, [r7, #10]
 800309e:	4613      	mov	r3, r2
 80030a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030a2:	897b      	ldrh	r3, [r7, #10]
 80030a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030a8:	7a7b      	ldrb	r3, [r7, #9]
 80030aa:	041b      	lsls	r3, r3, #16
 80030ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	0d5b      	lsrs	r3, r3, #21
 80030ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <I2C_TransferConfig+0x60>)
 80030d0:	430b      	orrs	r3, r1
 80030d2:	43db      	mvns	r3, r3
 80030d4:	ea02 0103 	and.w	r1, r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030e2:	bf00      	nop
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	03ff63ff 	.word	0x03ff63ff

080030f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b20      	cmp	r3, #32
 8003108:	d138      	bne.n	800317c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003114:	2302      	movs	r3, #2
 8003116:	e032      	b.n	800317e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2224      	movs	r2, #36	; 0x24
 8003124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0201 	bic.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003146:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6819      	ldr	r1, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	e000      	b.n	800317e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
  }
}
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800318a:	b480      	push	{r7}
 800318c:	b085      	sub	sp, #20
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b20      	cmp	r3, #32
 800319e:	d139      	bne.n	8003214 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e033      	b.n	8003216 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2224      	movs	r2, #36	; 0x24
 80031ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	021b      	lsls	r3, r3, #8
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	e000      	b.n	8003216 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003214:	2302      	movs	r3, #2
  }
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <HAL_PWREx_GetVoltageRange+0x18>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40007000 	.word	0x40007000

08003240 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324e:	d130      	bne.n	80032b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003250:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800325c:	d038      	beq.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800325e:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003266:	4a1e      	ldr	r2, [pc, #120]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800326c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800326e:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2232      	movs	r2, #50	; 0x32
 8003274:	fb02 f303 	mul.w	r3, r2, r3
 8003278:	4a1b      	ldr	r2, [pc, #108]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	0c9b      	lsrs	r3, r3, #18
 8003280:	3301      	adds	r3, #1
 8003282:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003284:	e002      	b.n	800328c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	3b01      	subs	r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800328c:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003298:	d102      	bne.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f2      	bne.n	8003286 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ac:	d110      	bne.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e00f      	b.n	80032d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032be:	d007      	beq.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032c8:	4a05      	ldr	r2, [pc, #20]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40007000 	.word	0x40007000
 80032e4:	20000004 	.word	0x20000004
 80032e8:	431bde83 	.word	0x431bde83

080032ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f000 bc02 	b.w	8003b04 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003300:	4b96      	ldr	r3, [pc, #600]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800330a:	4b94      	ldr	r3, [pc, #592]	; (800355c <HAL_RCC_OscConfig+0x270>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80e4 	beq.w	80034ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <HAL_RCC_OscConfig+0x4c>
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	f040 808b 	bne.w	8003446 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b01      	cmp	r3, #1
 8003334:	f040 8087 	bne.w	8003446 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003338:	4b88      	ldr	r3, [pc, #544]	; (800355c <HAL_RCC_OscConfig+0x270>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_OscConfig+0x64>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e3d9      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1a      	ldr	r2, [r3, #32]
 8003354:	4b81      	ldr	r3, [pc, #516]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <HAL_RCC_OscConfig+0x7e>
 8003360:	4b7e      	ldr	r3, [pc, #504]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003368:	e005      	b.n	8003376 <HAL_RCC_OscConfig+0x8a>
 800336a:	4b7c      	ldr	r3, [pc, #496]	; (800355c <HAL_RCC_OscConfig+0x270>)
 800336c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003376:	4293      	cmp	r3, r2
 8003378:	d223      	bcs.n	80033c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fd54 	bl	8003e2c <RCC_SetFlashLatencyFromMSIRange>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e3ba      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800338e:	4b73      	ldr	r3, [pc, #460]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a72      	ldr	r2, [pc, #456]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003394:	f043 0308 	orr.w	r3, r3, #8
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b70      	ldr	r3, [pc, #448]	; (800355c <HAL_RCC_OscConfig+0x270>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	496d      	ldr	r1, [pc, #436]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ac:	4b6b      	ldr	r3, [pc, #428]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	4968      	ldr	r1, [pc, #416]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
 80033c0:	e025      	b.n	800340e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033c2:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a65      	ldr	r2, [pc, #404]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033c8:	f043 0308 	orr.w	r3, r3, #8
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	4960      	ldr	r1, [pc, #384]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e0:	4b5e      	ldr	r3, [pc, #376]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	495b      	ldr	r1, [pc, #364]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fd14 	bl	8003e2c <RCC_SetFlashLatencyFromMSIRange>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e37a      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800340e:	f000 fc81 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003412:	4602      	mov	r2, r0
 8003414:	4b51      	ldr	r3, [pc, #324]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	4950      	ldr	r1, [pc, #320]	; (8003560 <HAL_RCC_OscConfig+0x274>)
 8003420:	5ccb      	ldrb	r3, [r1, r3]
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	fa22 f303 	lsr.w	r3, r2, r3
 800342a:	4a4e      	ldr	r2, [pc, #312]	; (8003564 <HAL_RCC_OscConfig+0x278>)
 800342c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800342e:	4b4e      	ldr	r3, [pc, #312]	; (8003568 <HAL_RCC_OscConfig+0x27c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fd fc7c 	bl	8000d30 <HAL_InitTick>
 8003438:	4603      	mov	r3, r0
 800343a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d052      	beq.n	80034e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	e35e      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d032      	beq.n	80034b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800344e:	4b43      	ldr	r3, [pc, #268]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a42      	ldr	r2, [pc, #264]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800345a:	f7fd fcb9 	bl	8000dd0 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003462:	f7fd fcb5 	bl	8000dd0 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e347      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003474:	4b39      	ldr	r3, [pc, #228]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003480:	4b36      	ldr	r3, [pc, #216]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a35      	ldr	r2, [pc, #212]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003486:	f043 0308 	orr.w	r3, r3, #8
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	4b33      	ldr	r3, [pc, #204]	; (800355c <HAL_RCC_OscConfig+0x270>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	4930      	ldr	r1, [pc, #192]	; (800355c <HAL_RCC_OscConfig+0x270>)
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800349e:	4b2f      	ldr	r3, [pc, #188]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	492b      	ldr	r1, [pc, #172]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	604b      	str	r3, [r1, #4]
 80034b2:	e01a      	b.n	80034ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034b4:	4b29      	ldr	r3, [pc, #164]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a28      	ldr	r2, [pc, #160]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034c0:	f7fd fc86 	bl	8000dd0 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034c8:	f7fd fc82 	bl	8000dd0 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e314      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1dc>
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d073      	beq.n	80035de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_OscConfig+0x21c>
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2b0c      	cmp	r3, #12
 8003500:	d10e      	bne.n	8003520 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d10b      	bne.n	8003520 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <HAL_RCC_OscConfig+0x270>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d063      	beq.n	80035dc <HAL_RCC_OscConfig+0x2f0>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d15f      	bne.n	80035dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e2f1      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003528:	d106      	bne.n	8003538 <HAL_RCC_OscConfig+0x24c>
 800352a:	4b0c      	ldr	r3, [pc, #48]	; (800355c <HAL_RCC_OscConfig+0x270>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a0b      	ldr	r2, [pc, #44]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e025      	b.n	8003584 <HAL_RCC_OscConfig+0x298>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003540:	d114      	bne.n	800356c <HAL_RCC_OscConfig+0x280>
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a05      	ldr	r2, [pc, #20]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b03      	ldr	r3, [pc, #12]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a02      	ldr	r2, [pc, #8]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e013      	b.n	8003584 <HAL_RCC_OscConfig+0x298>
 800355c:	40021000 	.word	0x40021000
 8003560:	08004ea4 	.word	0x08004ea4
 8003564:	20000004 	.word	0x20000004
 8003568:	20000008 	.word	0x20000008
 800356c:	4ba0      	ldr	r3, [pc, #640]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a9f      	ldr	r2, [pc, #636]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b9d      	ldr	r3, [pc, #628]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a9c      	ldr	r2, [pc, #624]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 800357e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d013      	beq.n	80035b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fd fc20 	bl	8000dd0 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003594:	f7fd fc1c 	bl	8000dd0 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	; 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e2ae      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a6:	4b92      	ldr	r3, [pc, #584]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x2a8>
 80035b2:	e014      	b.n	80035de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fd fc0c 	bl	8000dd0 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035bc:	f7fd fc08 	bl	8000dd0 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	; 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e29a      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ce:	4b88      	ldr	r3, [pc, #544]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x2d0>
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d060      	beq.n	80036ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_OscConfig+0x310>
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b0c      	cmp	r3, #12
 80035f4:	d119      	bne.n	800362a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d116      	bne.n	800362a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035fc:	4b7c      	ldr	r3, [pc, #496]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_OscConfig+0x328>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e277      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003614:	4b76      	ldr	r3, [pc, #472]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	061b      	lsls	r3, r3, #24
 8003622:	4973      	ldr	r1, [pc, #460]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003624:	4313      	orrs	r3, r2
 8003626:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003628:	e040      	b.n	80036ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d023      	beq.n	800367a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003632:	4b6f      	ldr	r3, [pc, #444]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a6e      	ldr	r2, [pc, #440]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363e:	f7fd fbc7 	bl	8000dd0 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003646:	f7fd fbc3 	bl	8000dd0 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e255      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003658:	4b65      	ldr	r3, [pc, #404]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003664:	4b62      	ldr	r3, [pc, #392]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	061b      	lsls	r3, r3, #24
 8003672:	495f      	ldr	r1, [pc, #380]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
 8003678:	e018      	b.n	80036ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800367a:	4b5d      	ldr	r3, [pc, #372]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a5c      	ldr	r2, [pc, #368]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003686:	f7fd fba3 	bl	8000dd0 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368e:	f7fd fb9f 	bl	8000dd0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e231      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036a0:	4b53      	ldr	r3, [pc, #332]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f0      	bne.n	800368e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d03c      	beq.n	8003732 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01c      	beq.n	80036fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c0:	4b4b      	ldr	r3, [pc, #300]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80036c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c6:	4a4a      	ldr	r2, [pc, #296]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d0:	f7fd fb7e 	bl	8000dd0 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d8:	f7fd fb7a 	bl	8000dd0 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e20c      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ea:	4b41      	ldr	r3, [pc, #260]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80036ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0ef      	beq.n	80036d8 <HAL_RCC_OscConfig+0x3ec>
 80036f8:	e01b      	b.n	8003732 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fa:	4b3d      	ldr	r3, [pc, #244]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80036fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003700:	4a3b      	ldr	r2, [pc, #236]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370a:	f7fd fb61 	bl	8000dd0 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003712:	f7fd fb5d 	bl	8000dd0 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e1ef      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003724:	4b32      	ldr	r3, [pc, #200]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1ef      	bne.n	8003712 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 80a6 	beq.w	800388c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003740:	2300      	movs	r3, #0
 8003742:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003744:	4b2a      	ldr	r3, [pc, #168]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10d      	bne.n	800376c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003750:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003754:	4a26      	ldr	r2, [pc, #152]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375a:	6593      	str	r3, [r2, #88]	; 0x58
 800375c:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 800375e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003768:	2301      	movs	r3, #1
 800376a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800376c:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <HAL_RCC_OscConfig+0x508>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d118      	bne.n	80037aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003778:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <HAL_RCC_OscConfig+0x508>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1d      	ldr	r2, [pc, #116]	; (80037f4 <HAL_RCC_OscConfig+0x508>)
 800377e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003782:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003784:	f7fd fb24 	bl	8000dd0 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378c:	f7fd fb20 	bl	8000dd0 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1b2      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <HAL_RCC_OscConfig+0x508>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d108      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4d8>
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b8:	4a0d      	ldr	r2, [pc, #52]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037c2:	e029      	b.n	8003818 <HAL_RCC_OscConfig+0x52c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b05      	cmp	r3, #5
 80037ca:	d115      	bne.n	80037f8 <HAL_RCC_OscConfig+0x50c>
 80037cc:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80037d4:	f043 0304 	orr.w	r3, r3, #4
 80037d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	4a03      	ldr	r2, [pc, #12]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037ec:	e014      	b.n	8003818 <HAL_RCC_OscConfig+0x52c>
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40007000 	.word	0x40007000
 80037f8:	4b9a      	ldr	r3, [pc, #616]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	4a99      	ldr	r2, [pc, #612]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003808:	4b96      	ldr	r3, [pc, #600]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	4a95      	ldr	r2, [pc, #596]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003810:	f023 0304 	bic.w	r3, r3, #4
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d016      	beq.n	800384e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fd fad6 	bl	8000dd0 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7fd fad2 	bl	8000dd0 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e162      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383e:	4b89      	ldr	r3, [pc, #548]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ed      	beq.n	8003828 <HAL_RCC_OscConfig+0x53c>
 800384c:	e015      	b.n	800387a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384e:	f7fd fabf 	bl	8000dd0 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003854:	e00a      	b.n	800386c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003856:	f7fd fabb 	bl	8000dd0 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	f241 3288 	movw	r2, #5000	; 0x1388
 8003864:	4293      	cmp	r3, r2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e14b      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800386c:	4b7d      	ldr	r3, [pc, #500]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1ed      	bne.n	8003856 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800387a:	7ffb      	ldrb	r3, [r7, #31]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003880:	4b78      	ldr	r3, [pc, #480]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003884:	4a77      	ldr	r2, [pc, #476]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d03c      	beq.n	8003912 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01c      	beq.n	80038da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038a0:	4b70      	ldr	r3, [pc, #448]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80038a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038a6:	4a6f      	ldr	r2, [pc, #444]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fd fa8e 	bl	8000dd0 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038b8:	f7fd fa8a 	bl	8000dd0 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e11c      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038ca:	4b66      	ldr	r3, [pc, #408]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80038cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0ef      	beq.n	80038b8 <HAL_RCC_OscConfig+0x5cc>
 80038d8:	e01b      	b.n	8003912 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038da:	4b62      	ldr	r3, [pc, #392]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80038dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038e0:	4a60      	ldr	r2, [pc, #384]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ea:	f7fd fa71 	bl	8000dd0 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038f2:	f7fd fa6d 	bl	8000dd0 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e0ff      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003904:	4b57      	ldr	r3, [pc, #348]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003906:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1ef      	bne.n	80038f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80f3 	beq.w	8003b02 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	2b02      	cmp	r3, #2
 8003922:	f040 80c9 	bne.w	8003ab8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003926:	4b4f      	ldr	r3, [pc, #316]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f003 0203 	and.w	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	429a      	cmp	r2, r3
 8003938:	d12c      	bne.n	8003994 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	3b01      	subs	r3, #1
 8003946:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003948:	429a      	cmp	r2, r3
 800394a:	d123      	bne.n	8003994 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003956:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003958:	429a      	cmp	r2, r3
 800395a:	d11b      	bne.n	8003994 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d113      	bne.n	8003994 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003976:	085b      	lsrs	r3, r3, #1
 8003978:	3b01      	subs	r3, #1
 800397a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d109      	bne.n	8003994 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	3b01      	subs	r3, #1
 800398e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d06b      	beq.n	8003a6c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b0c      	cmp	r3, #12
 8003998:	d062      	beq.n	8003a60 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800399a:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e0ac      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039aa:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a2d      	ldr	r2, [pc, #180]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80039b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039b6:	f7fd fa0b 	bl	8000dd0 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039be:	f7fd fa07 	bl	8000dd0 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e099      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d0:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f0      	bne.n	80039be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039dc:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	4b21      	ldr	r3, [pc, #132]	; (8003a68 <HAL_RCC_OscConfig+0x77c>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039ec:	3a01      	subs	r2, #1
 80039ee:	0112      	lsls	r2, r2, #4
 80039f0:	4311      	orrs	r1, r2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039f6:	0212      	lsls	r2, r2, #8
 80039f8:	4311      	orrs	r1, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039fe:	0852      	lsrs	r2, r2, #1
 8003a00:	3a01      	subs	r2, #1
 8003a02:	0552      	lsls	r2, r2, #21
 8003a04:	4311      	orrs	r1, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a0a:	0852      	lsrs	r2, r2, #1
 8003a0c:	3a01      	subs	r2, #1
 8003a0e:	0652      	lsls	r2, r2, #25
 8003a10:	4311      	orrs	r1, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a16:	06d2      	lsls	r2, r2, #27
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	4912      	ldr	r1, [pc, #72]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a20:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a0f      	ldr	r2, [pc, #60]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a2c:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4a0c      	ldr	r2, [pc, #48]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a38:	f7fd f9ca 	bl	8000dd0 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fd f9c6 	bl	8000dd0 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e058      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a52:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a5e:	e050      	b.n	8003b02 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e04f      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
 8003a64:	40021000 	.word	0x40021000
 8003a68:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a6c:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d144      	bne.n	8003b02 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a78:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a23      	ldr	r2, [pc, #140]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a84:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a20      	ldr	r2, [pc, #128]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a90:	f7fd f99e 	bl	8000dd0 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fd f99a 	bl	8000dd0 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e02c      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aaa:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x7ac>
 8003ab6:	e024      	b.n	8003b02 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d01f      	beq.n	8003afe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a12      	ldr	r2, [pc, #72]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003ac4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fd f981 	bl	8000dd0 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad2:	f7fd f97d 	bl	8000dd0 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e00f      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f0      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	4905      	ldr	r1, [pc, #20]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_RCC_OscConfig+0x824>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	60cb      	str	r3, [r1, #12]
 8003afc:	e001      	b.n	8003b02 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3720      	adds	r7, #32
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	feeefffc 	.word	0xfeeefffc

08003b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0e7      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b28:	4b75      	ldr	r3, [pc, #468]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d910      	bls.n	8003b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b72      	ldr	r3, [pc, #456]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 0207 	bic.w	r2, r3, #7
 8003b3e:	4970      	ldr	r1, [pc, #448]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b6e      	ldr	r3, [pc, #440]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0cf      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d010      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	4b66      	ldr	r3, [pc, #408]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d908      	bls.n	8003b86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b74:	4b63      	ldr	r3, [pc, #396]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4960      	ldr	r1, [pc, #384]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d04c      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d107      	bne.n	8003baa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9a:	4b5a      	ldr	r3, [pc, #360]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d121      	bne.n	8003bea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e0a6      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb2:	4b54      	ldr	r3, [pc, #336]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d115      	bne.n	8003bea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e09a      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bca:	4b4e      	ldr	r3, [pc, #312]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e08e      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bda:	4b4a      	ldr	r3, [pc, #296]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e086      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bea:	4b46      	ldr	r3, [pc, #280]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 0203 	bic.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4943      	ldr	r1, [pc, #268]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bfc:	f7fd f8e8 	bl	8000dd0 <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c04:	f7fd f8e4 	bl	8000dd0 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e06e      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	4b3a      	ldr	r3, [pc, #232]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 020c 	and.w	r2, r3, #12
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d1eb      	bne.n	8003c04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d010      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	4b31      	ldr	r3, [pc, #196]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d208      	bcs.n	8003c5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c48:	4b2e      	ldr	r3, [pc, #184]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	492b      	ldr	r1, [pc, #172]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c5a:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d210      	bcs.n	8003c8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c68:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f023 0207 	bic.w	r2, r3, #7
 8003c70:	4923      	ldr	r1, [pc, #140]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c78:	4b21      	ldr	r3, [pc, #132]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d001      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e036      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c96:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	4918      	ldr	r1, [pc, #96]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d009      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cb4:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4910      	ldr	r1, [pc, #64]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cc8:	f000 f824 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	490b      	ldr	r1, [pc, #44]	; (8003d08 <HAL_RCC_ClockConfig+0x1f4>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce4:	4a09      	ldr	r2, [pc, #36]	; (8003d0c <HAL_RCC_ClockConfig+0x1f8>)
 8003ce6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <HAL_RCC_ClockConfig+0x1fc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fd f81f 	bl	8000d30 <HAL_InitTick>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003cf6:	7afb      	ldrb	r3, [r7, #11]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40022000 	.word	0x40022000
 8003d04:	40021000 	.word	0x40021000
 8003d08:	08004ea4 	.word	0x08004ea4
 8003d0c:	20000004 	.word	0x20000004
 8003d10:	20000008 	.word	0x20000008

08003d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b089      	sub	sp, #36	; 0x24
 8003d18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d22:	4b3e      	ldr	r3, [pc, #248]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d2c:	4b3b      	ldr	r3, [pc, #236]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0x34>
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	d121      	bne.n	8003d86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d11e      	bne.n	8003d86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d48:	4b34      	ldr	r3, [pc, #208]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d54:	4b31      	ldr	r3, [pc, #196]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	e005      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d64:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d70:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10d      	bne.n	8003d9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d84:	e00a      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d102      	bne.n	8003d92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d8c:	4b25      	ldr	r3, [pc, #148]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	e004      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d98:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	d134      	bne.n	8003e0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003da2:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d003      	beq.n	8003dba <HAL_RCC_GetSysClockFreq+0xa6>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d003      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0xac>
 8003db8:	e005      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003dba:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dbc:	617b      	str	r3, [r7, #20]
      break;
 8003dbe:	e005      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dc2:	617b      	str	r3, [r7, #20]
      break;
 8003dc4:	e002      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	617b      	str	r3, [r7, #20]
      break;
 8003dca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dcc:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	fb03 f202 	mul.w	r2, r3, r2
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	0e5b      	lsrs	r3, r3, #25
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e0c:	69bb      	ldr	r3, [r7, #24]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3724      	adds	r7, #36	; 0x24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	08004eb4 	.word	0x08004eb4
 8003e24:	00f42400 	.word	0x00f42400
 8003e28:	007a1200 	.word	0x007a1200

08003e2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e38:	4b2a      	ldr	r3, [pc, #168]	; (8003ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e44:	f7ff f9ee 	bl	8003224 <HAL_PWREx_GetVoltageRange>
 8003e48:	6178      	str	r0, [r7, #20]
 8003e4a:	e014      	b.n	8003e76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e4c:	4b25      	ldr	r3, [pc, #148]	; (8003ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	4a24      	ldr	r2, [pc, #144]	; (8003ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e56:	6593      	str	r3, [r2, #88]	; 0x58
 8003e58:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e64:	f7ff f9de 	bl	8003224 <HAL_PWREx_GetVoltageRange>
 8003e68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7c:	d10b      	bne.n	8003e96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b80      	cmp	r3, #128	; 0x80
 8003e82:	d919      	bls.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2ba0      	cmp	r3, #160	; 0xa0
 8003e88:	d902      	bls.n	8003e90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	e013      	b.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e90:	2301      	movs	r3, #1
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	e010      	b.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b80      	cmp	r3, #128	; 0x80
 8003e9a:	d902      	bls.n	8003ea2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	e00a      	b.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b80      	cmp	r3, #128	; 0x80
 8003ea6:	d102      	bne.n	8003eae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	e004      	b.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b70      	cmp	r3, #112	; 0x70
 8003eb2:	d101      	bne.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f023 0207 	bic.w	r2, r3, #7
 8003ec0:	4909      	ldr	r1, [pc, #36]	; (8003ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ec8:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d001      	beq.n	8003eda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40022000 	.word	0x40022000

08003eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ef8:	2300      	movs	r3, #0
 8003efa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d031      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f10:	d01a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003f12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f16:	d814      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d009      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f20:	d10f      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003f22:	4b5d      	ldr	r3, [pc, #372]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	4a5c      	ldr	r2, [pc, #368]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f2e:	e00c      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3304      	adds	r3, #4
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f9ce 	bl	80042d8 <RCCEx_PLLSAI1_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f40:	e003      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	74fb      	strb	r3, [r7, #19]
      break;
 8003f46:	e000      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4a:	7cfb      	ldrb	r3, [r7, #19]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f50:	4b51      	ldr	r3, [pc, #324]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	494e      	ldr	r1, [pc, #312]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f66:	e001      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f68:	7cfb      	ldrb	r3, [r7, #19]
 8003f6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 809e 	beq.w	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f7e:	4b46      	ldr	r3, [pc, #280]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00d      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f94:	4b40      	ldr	r3, [pc, #256]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f98:	4a3f      	ldr	r2, [pc, #252]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8003fa0:	4b3d      	ldr	r3, [pc, #244]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fac:	2301      	movs	r3, #1
 8003fae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fb0:	4b3a      	ldr	r3, [pc, #232]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a39      	ldr	r2, [pc, #228]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fbc:	f7fc ff08 	bl	8000dd0 <HAL_GetTick>
 8003fc0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fc2:	e009      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc4:	f7fc ff04 	bl	8000dd0 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d902      	bls.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	74fb      	strb	r3, [r7, #19]
        break;
 8003fd6:	e005      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fd8:	4b30      	ldr	r3, [pc, #192]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0ef      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d15a      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fea:	4b2b      	ldr	r3, [pc, #172]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01e      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	429a      	cmp	r2, r3
 8004004:	d019      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004006:	4b24      	ldr	r3, [pc, #144]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004010:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004012:	4b21      	ldr	r3, [pc, #132]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004018:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800401a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004022:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	4a1b      	ldr	r2, [pc, #108]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800402a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004032:	4a19      	ldr	r2, [pc, #100]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d016      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fc fec4 	bl	8000dd0 <HAL_GetTick>
 8004048:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404a:	e00b      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404c:	f7fc fec0 	bl	8000dd0 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	; 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d902      	bls.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	74fb      	strb	r3, [r7, #19]
            break;
 8004062:	e006      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0ec      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10b      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004078:	4b07      	ldr	r3, [pc, #28]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004086:	4904      	ldr	r1, [pc, #16]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800408e:	e009      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	74bb      	strb	r3, [r7, #18]
 8004094:	e006      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004096:	bf00      	nop
 8004098:	40021000 	.word	0x40021000
 800409c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a0:	7cfb      	ldrb	r3, [r7, #19]
 80040a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040a4:	7c7b      	ldrb	r3, [r7, #17]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d105      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040aa:	4b8a      	ldr	r3, [pc, #552]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	4a89      	ldr	r2, [pc, #548]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040c2:	4b84      	ldr	r3, [pc, #528]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c8:	f023 0203 	bic.w	r2, r3, #3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	4980      	ldr	r1, [pc, #512]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040e4:	4b7b      	ldr	r3, [pc, #492]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ea:	f023 020c 	bic.w	r2, r3, #12
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	4978      	ldr	r1, [pc, #480]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004106:	4b73      	ldr	r3, [pc, #460]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	496f      	ldr	r1, [pc, #444]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004128:	4b6a      	ldr	r3, [pc, #424]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004136:	4967      	ldr	r1, [pc, #412]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800414a:	4b62      	ldr	r3, [pc, #392]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	495e      	ldr	r1, [pc, #376]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800416c:	4b59      	ldr	r3, [pc, #356]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	4956      	ldr	r1, [pc, #344]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800418e:	4b51      	ldr	r3, [pc, #324]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004194:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	494d      	ldr	r1, [pc, #308]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d028      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041b0:	4b48      	ldr	r3, [pc, #288]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	4945      	ldr	r1, [pc, #276]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ce:	d106      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d0:	4b40      	ldr	r3, [pc, #256]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4a3f      	ldr	r2, [pc, #252]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041da:	60d3      	str	r3, [r2, #12]
 80041dc:	e011      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041e6:	d10c      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3304      	adds	r3, #4
 80041ec:	2101      	movs	r1, #1
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f872 	bl	80042d8 <RCCEx_PLLSAI1_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041f8:	7cfb      	ldrb	r3, [r7, #19]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80041fe:	7cfb      	ldrb	r3, [r7, #19]
 8004200:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d028      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800420e:	4b31      	ldr	r3, [pc, #196]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004214:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421c:	492d      	ldr	r1, [pc, #180]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800422c:	d106      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800422e:	4b29      	ldr	r3, [pc, #164]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	4a28      	ldr	r2, [pc, #160]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004238:	60d3      	str	r3, [r2, #12]
 800423a:	e011      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004240:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004244:	d10c      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	2101      	movs	r1, #1
 800424c:	4618      	mov	r0, r3
 800424e:	f000 f843 	bl	80042d8 <RCCEx_PLLSAI1_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004256:	7cfb      	ldrb	r3, [r7, #19]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01c      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427a:	4916      	ldr	r1, [pc, #88]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004286:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800428a:	d10c      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3304      	adds	r3, #4
 8004290:	2102      	movs	r1, #2
 8004292:	4618      	mov	r0, r3
 8004294:	f000 f820 	bl	80042d8 <RCCEx_PLLSAI1_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800429c:	7cfb      	ldrb	r3, [r7, #19]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80042a2:	7cfb      	ldrb	r3, [r7, #19]
 80042a4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c0:	4904      	ldr	r1, [pc, #16]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000

080042d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042e6:	4b74      	ldr	r3, [pc, #464]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d018      	beq.n	8004324 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042f2:	4b71      	ldr	r3, [pc, #452]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0203 	and.w	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d10d      	bne.n	800431e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
       ||
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800430a:	4b6b      	ldr	r3, [pc, #428]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	091b      	lsrs	r3, r3, #4
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
       ||
 800431a:	429a      	cmp	r2, r3
 800431c:	d047      	beq.n	80043ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
 8004322:	e044      	b.n	80043ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d018      	beq.n	800435e <RCCEx_PLLSAI1_Config+0x86>
 800432c:	2b03      	cmp	r3, #3
 800432e:	d825      	bhi.n	800437c <RCCEx_PLLSAI1_Config+0xa4>
 8004330:	2b01      	cmp	r3, #1
 8004332:	d002      	beq.n	800433a <RCCEx_PLLSAI1_Config+0x62>
 8004334:	2b02      	cmp	r3, #2
 8004336:	d009      	beq.n	800434c <RCCEx_PLLSAI1_Config+0x74>
 8004338:	e020      	b.n	800437c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800433a:	4b5f      	ldr	r3, [pc, #380]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d11d      	bne.n	8004382 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800434a:	e01a      	b.n	8004382 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800434c:	4b5a      	ldr	r3, [pc, #360]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004354:	2b00      	cmp	r3, #0
 8004356:	d116      	bne.n	8004386 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800435c:	e013      	b.n	8004386 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800435e:	4b56      	ldr	r3, [pc, #344]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10f      	bne.n	800438a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800436a:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800437a:	e006      	b.n	800438a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
      break;
 8004380:	e004      	b.n	800438c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004382:	bf00      	nop
 8004384:	e002      	b.n	800438c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004386:	bf00      	nop
 8004388:	e000      	b.n	800438c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800438a:	bf00      	nop
    }

    if(status == HAL_OK)
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10d      	bne.n	80043ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004392:	4b49      	ldr	r3, [pc, #292]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6819      	ldr	r1, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	430b      	orrs	r3, r1
 80043a8:	4943      	ldr	r1, [pc, #268]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d17c      	bne.n	80044ae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043b4:	4b40      	ldr	r3, [pc, #256]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a3f      	ldr	r2, [pc, #252]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c0:	f7fc fd06 	bl	8000dd0 <HAL_GetTick>
 80043c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043c6:	e009      	b.n	80043dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043c8:	f7fc fd02 	bl	8000dd0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d902      	bls.n	80043dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	73fb      	strb	r3, [r7, #15]
        break;
 80043da:	e005      	b.n	80043e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043dc:	4b36      	ldr	r3, [pc, #216]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ef      	bne.n	80043c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d15f      	bne.n	80044ae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d110      	bne.n	8004416 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043f4:	4b30      	ldr	r3, [pc, #192]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80043fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6892      	ldr	r2, [r2, #8]
 8004404:	0211      	lsls	r1, r2, #8
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68d2      	ldr	r2, [r2, #12]
 800440a:	06d2      	lsls	r2, r2, #27
 800440c:	430a      	orrs	r2, r1
 800440e:	492a      	ldr	r1, [pc, #168]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004410:	4313      	orrs	r3, r2
 8004412:	610b      	str	r3, [r1, #16]
 8004414:	e027      	b.n	8004466 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d112      	bne.n	8004442 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800441c:	4b26      	ldr	r3, [pc, #152]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004424:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6892      	ldr	r2, [r2, #8]
 800442c:	0211      	lsls	r1, r2, #8
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6912      	ldr	r2, [r2, #16]
 8004432:	0852      	lsrs	r2, r2, #1
 8004434:	3a01      	subs	r2, #1
 8004436:	0552      	lsls	r2, r2, #21
 8004438:	430a      	orrs	r2, r1
 800443a:	491f      	ldr	r1, [pc, #124]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800443c:	4313      	orrs	r3, r2
 800443e:	610b      	str	r3, [r1, #16]
 8004440:	e011      	b.n	8004466 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004442:	4b1d      	ldr	r3, [pc, #116]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800444a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6892      	ldr	r2, [r2, #8]
 8004452:	0211      	lsls	r1, r2, #8
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6952      	ldr	r2, [r2, #20]
 8004458:	0852      	lsrs	r2, r2, #1
 800445a:	3a01      	subs	r2, #1
 800445c:	0652      	lsls	r2, r2, #25
 800445e:	430a      	orrs	r2, r1
 8004460:	4915      	ldr	r1, [pc, #84]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004462:	4313      	orrs	r3, r2
 8004464:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004466:	4b14      	ldr	r3, [pc, #80]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800446c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004470:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004472:	f7fc fcad 	bl	8000dd0 <HAL_GetTick>
 8004476:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004478:	e009      	b.n	800448e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800447a:	f7fc fca9 	bl	8000dd0 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d902      	bls.n	800448e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	73fb      	strb	r3, [r7, #15]
          break;
 800448c:	e005      	b.n	800449a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800448e:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0ef      	beq.n	800447a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d106      	bne.n	80044ae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	4903      	ldr	r1, [pc, #12]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40021000 	.word	0x40021000

080044bc <__errno>:
 80044bc:	4b01      	ldr	r3, [pc, #4]	; (80044c4 <__errno+0x8>)
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20000010 	.word	0x20000010

080044c8 <__libc_init_array>:
 80044c8:	b570      	push	{r4, r5, r6, lr}
 80044ca:	4d0d      	ldr	r5, [pc, #52]	; (8004500 <__libc_init_array+0x38>)
 80044cc:	4c0d      	ldr	r4, [pc, #52]	; (8004504 <__libc_init_array+0x3c>)
 80044ce:	1b64      	subs	r4, r4, r5
 80044d0:	10a4      	asrs	r4, r4, #2
 80044d2:	2600      	movs	r6, #0
 80044d4:	42a6      	cmp	r6, r4
 80044d6:	d109      	bne.n	80044ec <__libc_init_array+0x24>
 80044d8:	4d0b      	ldr	r5, [pc, #44]	; (8004508 <__libc_init_array+0x40>)
 80044da:	4c0c      	ldr	r4, [pc, #48]	; (800450c <__libc_init_array+0x44>)
 80044dc:	f000 fc8e 	bl	8004dfc <_init>
 80044e0:	1b64      	subs	r4, r4, r5
 80044e2:	10a4      	asrs	r4, r4, #2
 80044e4:	2600      	movs	r6, #0
 80044e6:	42a6      	cmp	r6, r4
 80044e8:	d105      	bne.n	80044f6 <__libc_init_array+0x2e>
 80044ea:	bd70      	pop	{r4, r5, r6, pc}
 80044ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f0:	4798      	blx	r3
 80044f2:	3601      	adds	r6, #1
 80044f4:	e7ee      	b.n	80044d4 <__libc_init_array+0xc>
 80044f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044fa:	4798      	blx	r3
 80044fc:	3601      	adds	r6, #1
 80044fe:	e7f2      	b.n	80044e6 <__libc_init_array+0x1e>
 8004500:	08004f18 	.word	0x08004f18
 8004504:	08004f18 	.word	0x08004f18
 8004508:	08004f18 	.word	0x08004f18
 800450c:	08004f1c 	.word	0x08004f1c

08004510 <memset>:
 8004510:	4402      	add	r2, r0
 8004512:	4603      	mov	r3, r0
 8004514:	4293      	cmp	r3, r2
 8004516:	d100      	bne.n	800451a <memset+0xa>
 8004518:	4770      	bx	lr
 800451a:	f803 1b01 	strb.w	r1, [r3], #1
 800451e:	e7f9      	b.n	8004514 <memset+0x4>

08004520 <_vsiprintf_r>:
 8004520:	b500      	push	{lr}
 8004522:	b09b      	sub	sp, #108	; 0x6c
 8004524:	9100      	str	r1, [sp, #0]
 8004526:	9104      	str	r1, [sp, #16]
 8004528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800452c:	9105      	str	r1, [sp, #20]
 800452e:	9102      	str	r1, [sp, #8]
 8004530:	4905      	ldr	r1, [pc, #20]	; (8004548 <_vsiprintf_r+0x28>)
 8004532:	9103      	str	r1, [sp, #12]
 8004534:	4669      	mov	r1, sp
 8004536:	f000 f86f 	bl	8004618 <_svfiprintf_r>
 800453a:	9b00      	ldr	r3, [sp, #0]
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	b01b      	add	sp, #108	; 0x6c
 8004542:	f85d fb04 	ldr.w	pc, [sp], #4
 8004546:	bf00      	nop
 8004548:	ffff0208 	.word	0xffff0208

0800454c <vsiprintf>:
 800454c:	4613      	mov	r3, r2
 800454e:	460a      	mov	r2, r1
 8004550:	4601      	mov	r1, r0
 8004552:	4802      	ldr	r0, [pc, #8]	; (800455c <vsiprintf+0x10>)
 8004554:	6800      	ldr	r0, [r0, #0]
 8004556:	f7ff bfe3 	b.w	8004520 <_vsiprintf_r>
 800455a:	bf00      	nop
 800455c:	20000010 	.word	0x20000010

08004560 <__ssputs_r>:
 8004560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004564:	688e      	ldr	r6, [r1, #8]
 8004566:	429e      	cmp	r6, r3
 8004568:	4682      	mov	sl, r0
 800456a:	460c      	mov	r4, r1
 800456c:	4690      	mov	r8, r2
 800456e:	461f      	mov	r7, r3
 8004570:	d838      	bhi.n	80045e4 <__ssputs_r+0x84>
 8004572:	898a      	ldrh	r2, [r1, #12]
 8004574:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004578:	d032      	beq.n	80045e0 <__ssputs_r+0x80>
 800457a:	6825      	ldr	r5, [r4, #0]
 800457c:	6909      	ldr	r1, [r1, #16]
 800457e:	eba5 0901 	sub.w	r9, r5, r1
 8004582:	6965      	ldr	r5, [r4, #20]
 8004584:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004588:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800458c:	3301      	adds	r3, #1
 800458e:	444b      	add	r3, r9
 8004590:	106d      	asrs	r5, r5, #1
 8004592:	429d      	cmp	r5, r3
 8004594:	bf38      	it	cc
 8004596:	461d      	movcc	r5, r3
 8004598:	0553      	lsls	r3, r2, #21
 800459a:	d531      	bpl.n	8004600 <__ssputs_r+0xa0>
 800459c:	4629      	mov	r1, r5
 800459e:	f000 fb63 	bl	8004c68 <_malloc_r>
 80045a2:	4606      	mov	r6, r0
 80045a4:	b950      	cbnz	r0, 80045bc <__ssputs_r+0x5c>
 80045a6:	230c      	movs	r3, #12
 80045a8:	f8ca 3000 	str.w	r3, [sl]
 80045ac:	89a3      	ldrh	r3, [r4, #12]
 80045ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045b2:	81a3      	strh	r3, [r4, #12]
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045bc:	6921      	ldr	r1, [r4, #16]
 80045be:	464a      	mov	r2, r9
 80045c0:	f000 fabe 	bl	8004b40 <memcpy>
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ce:	81a3      	strh	r3, [r4, #12]
 80045d0:	6126      	str	r6, [r4, #16]
 80045d2:	6165      	str	r5, [r4, #20]
 80045d4:	444e      	add	r6, r9
 80045d6:	eba5 0509 	sub.w	r5, r5, r9
 80045da:	6026      	str	r6, [r4, #0]
 80045dc:	60a5      	str	r5, [r4, #8]
 80045de:	463e      	mov	r6, r7
 80045e0:	42be      	cmp	r6, r7
 80045e2:	d900      	bls.n	80045e6 <__ssputs_r+0x86>
 80045e4:	463e      	mov	r6, r7
 80045e6:	6820      	ldr	r0, [r4, #0]
 80045e8:	4632      	mov	r2, r6
 80045ea:	4641      	mov	r1, r8
 80045ec:	f000 fab6 	bl	8004b5c <memmove>
 80045f0:	68a3      	ldr	r3, [r4, #8]
 80045f2:	1b9b      	subs	r3, r3, r6
 80045f4:	60a3      	str	r3, [r4, #8]
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	4433      	add	r3, r6
 80045fa:	6023      	str	r3, [r4, #0]
 80045fc:	2000      	movs	r0, #0
 80045fe:	e7db      	b.n	80045b8 <__ssputs_r+0x58>
 8004600:	462a      	mov	r2, r5
 8004602:	f000 fba5 	bl	8004d50 <_realloc_r>
 8004606:	4606      	mov	r6, r0
 8004608:	2800      	cmp	r0, #0
 800460a:	d1e1      	bne.n	80045d0 <__ssputs_r+0x70>
 800460c:	6921      	ldr	r1, [r4, #16]
 800460e:	4650      	mov	r0, sl
 8004610:	f000 fabe 	bl	8004b90 <_free_r>
 8004614:	e7c7      	b.n	80045a6 <__ssputs_r+0x46>
	...

08004618 <_svfiprintf_r>:
 8004618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461c:	4698      	mov	r8, r3
 800461e:	898b      	ldrh	r3, [r1, #12]
 8004620:	061b      	lsls	r3, r3, #24
 8004622:	b09d      	sub	sp, #116	; 0x74
 8004624:	4607      	mov	r7, r0
 8004626:	460d      	mov	r5, r1
 8004628:	4614      	mov	r4, r2
 800462a:	d50e      	bpl.n	800464a <_svfiprintf_r+0x32>
 800462c:	690b      	ldr	r3, [r1, #16]
 800462e:	b963      	cbnz	r3, 800464a <_svfiprintf_r+0x32>
 8004630:	2140      	movs	r1, #64	; 0x40
 8004632:	f000 fb19 	bl	8004c68 <_malloc_r>
 8004636:	6028      	str	r0, [r5, #0]
 8004638:	6128      	str	r0, [r5, #16]
 800463a:	b920      	cbnz	r0, 8004646 <_svfiprintf_r+0x2e>
 800463c:	230c      	movs	r3, #12
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004644:	e0d1      	b.n	80047ea <_svfiprintf_r+0x1d2>
 8004646:	2340      	movs	r3, #64	; 0x40
 8004648:	616b      	str	r3, [r5, #20]
 800464a:	2300      	movs	r3, #0
 800464c:	9309      	str	r3, [sp, #36]	; 0x24
 800464e:	2320      	movs	r3, #32
 8004650:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004654:	f8cd 800c 	str.w	r8, [sp, #12]
 8004658:	2330      	movs	r3, #48	; 0x30
 800465a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004804 <_svfiprintf_r+0x1ec>
 800465e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004662:	f04f 0901 	mov.w	r9, #1
 8004666:	4623      	mov	r3, r4
 8004668:	469a      	mov	sl, r3
 800466a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800466e:	b10a      	cbz	r2, 8004674 <_svfiprintf_r+0x5c>
 8004670:	2a25      	cmp	r2, #37	; 0x25
 8004672:	d1f9      	bne.n	8004668 <_svfiprintf_r+0x50>
 8004674:	ebba 0b04 	subs.w	fp, sl, r4
 8004678:	d00b      	beq.n	8004692 <_svfiprintf_r+0x7a>
 800467a:	465b      	mov	r3, fp
 800467c:	4622      	mov	r2, r4
 800467e:	4629      	mov	r1, r5
 8004680:	4638      	mov	r0, r7
 8004682:	f7ff ff6d 	bl	8004560 <__ssputs_r>
 8004686:	3001      	adds	r0, #1
 8004688:	f000 80aa 	beq.w	80047e0 <_svfiprintf_r+0x1c8>
 800468c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800468e:	445a      	add	r2, fp
 8004690:	9209      	str	r2, [sp, #36]	; 0x24
 8004692:	f89a 3000 	ldrb.w	r3, [sl]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 80a2 	beq.w	80047e0 <_svfiprintf_r+0x1c8>
 800469c:	2300      	movs	r3, #0
 800469e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046a6:	f10a 0a01 	add.w	sl, sl, #1
 80046aa:	9304      	str	r3, [sp, #16]
 80046ac:	9307      	str	r3, [sp, #28]
 80046ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046b2:	931a      	str	r3, [sp, #104]	; 0x68
 80046b4:	4654      	mov	r4, sl
 80046b6:	2205      	movs	r2, #5
 80046b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046bc:	4851      	ldr	r0, [pc, #324]	; (8004804 <_svfiprintf_r+0x1ec>)
 80046be:	f7fb fd8f 	bl	80001e0 <memchr>
 80046c2:	9a04      	ldr	r2, [sp, #16]
 80046c4:	b9d8      	cbnz	r0, 80046fe <_svfiprintf_r+0xe6>
 80046c6:	06d0      	lsls	r0, r2, #27
 80046c8:	bf44      	itt	mi
 80046ca:	2320      	movmi	r3, #32
 80046cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046d0:	0711      	lsls	r1, r2, #28
 80046d2:	bf44      	itt	mi
 80046d4:	232b      	movmi	r3, #43	; 0x2b
 80046d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046da:	f89a 3000 	ldrb.w	r3, [sl]
 80046de:	2b2a      	cmp	r3, #42	; 0x2a
 80046e0:	d015      	beq.n	800470e <_svfiprintf_r+0xf6>
 80046e2:	9a07      	ldr	r2, [sp, #28]
 80046e4:	4654      	mov	r4, sl
 80046e6:	2000      	movs	r0, #0
 80046e8:	f04f 0c0a 	mov.w	ip, #10
 80046ec:	4621      	mov	r1, r4
 80046ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046f2:	3b30      	subs	r3, #48	; 0x30
 80046f4:	2b09      	cmp	r3, #9
 80046f6:	d94e      	bls.n	8004796 <_svfiprintf_r+0x17e>
 80046f8:	b1b0      	cbz	r0, 8004728 <_svfiprintf_r+0x110>
 80046fa:	9207      	str	r2, [sp, #28]
 80046fc:	e014      	b.n	8004728 <_svfiprintf_r+0x110>
 80046fe:	eba0 0308 	sub.w	r3, r0, r8
 8004702:	fa09 f303 	lsl.w	r3, r9, r3
 8004706:	4313      	orrs	r3, r2
 8004708:	9304      	str	r3, [sp, #16]
 800470a:	46a2      	mov	sl, r4
 800470c:	e7d2      	b.n	80046b4 <_svfiprintf_r+0x9c>
 800470e:	9b03      	ldr	r3, [sp, #12]
 8004710:	1d19      	adds	r1, r3, #4
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	9103      	str	r1, [sp, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	bfbb      	ittet	lt
 800471a:	425b      	neglt	r3, r3
 800471c:	f042 0202 	orrlt.w	r2, r2, #2
 8004720:	9307      	strge	r3, [sp, #28]
 8004722:	9307      	strlt	r3, [sp, #28]
 8004724:	bfb8      	it	lt
 8004726:	9204      	strlt	r2, [sp, #16]
 8004728:	7823      	ldrb	r3, [r4, #0]
 800472a:	2b2e      	cmp	r3, #46	; 0x2e
 800472c:	d10c      	bne.n	8004748 <_svfiprintf_r+0x130>
 800472e:	7863      	ldrb	r3, [r4, #1]
 8004730:	2b2a      	cmp	r3, #42	; 0x2a
 8004732:	d135      	bne.n	80047a0 <_svfiprintf_r+0x188>
 8004734:	9b03      	ldr	r3, [sp, #12]
 8004736:	1d1a      	adds	r2, r3, #4
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	9203      	str	r2, [sp, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	bfb8      	it	lt
 8004740:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004744:	3402      	adds	r4, #2
 8004746:	9305      	str	r3, [sp, #20]
 8004748:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004814 <_svfiprintf_r+0x1fc>
 800474c:	7821      	ldrb	r1, [r4, #0]
 800474e:	2203      	movs	r2, #3
 8004750:	4650      	mov	r0, sl
 8004752:	f7fb fd45 	bl	80001e0 <memchr>
 8004756:	b140      	cbz	r0, 800476a <_svfiprintf_r+0x152>
 8004758:	2340      	movs	r3, #64	; 0x40
 800475a:	eba0 000a 	sub.w	r0, r0, sl
 800475e:	fa03 f000 	lsl.w	r0, r3, r0
 8004762:	9b04      	ldr	r3, [sp, #16]
 8004764:	4303      	orrs	r3, r0
 8004766:	3401      	adds	r4, #1
 8004768:	9304      	str	r3, [sp, #16]
 800476a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800476e:	4826      	ldr	r0, [pc, #152]	; (8004808 <_svfiprintf_r+0x1f0>)
 8004770:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004774:	2206      	movs	r2, #6
 8004776:	f7fb fd33 	bl	80001e0 <memchr>
 800477a:	2800      	cmp	r0, #0
 800477c:	d038      	beq.n	80047f0 <_svfiprintf_r+0x1d8>
 800477e:	4b23      	ldr	r3, [pc, #140]	; (800480c <_svfiprintf_r+0x1f4>)
 8004780:	bb1b      	cbnz	r3, 80047ca <_svfiprintf_r+0x1b2>
 8004782:	9b03      	ldr	r3, [sp, #12]
 8004784:	3307      	adds	r3, #7
 8004786:	f023 0307 	bic.w	r3, r3, #7
 800478a:	3308      	adds	r3, #8
 800478c:	9303      	str	r3, [sp, #12]
 800478e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004790:	4433      	add	r3, r6
 8004792:	9309      	str	r3, [sp, #36]	; 0x24
 8004794:	e767      	b.n	8004666 <_svfiprintf_r+0x4e>
 8004796:	fb0c 3202 	mla	r2, ip, r2, r3
 800479a:	460c      	mov	r4, r1
 800479c:	2001      	movs	r0, #1
 800479e:	e7a5      	b.n	80046ec <_svfiprintf_r+0xd4>
 80047a0:	2300      	movs	r3, #0
 80047a2:	3401      	adds	r4, #1
 80047a4:	9305      	str	r3, [sp, #20]
 80047a6:	4619      	mov	r1, r3
 80047a8:	f04f 0c0a 	mov.w	ip, #10
 80047ac:	4620      	mov	r0, r4
 80047ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047b2:	3a30      	subs	r2, #48	; 0x30
 80047b4:	2a09      	cmp	r2, #9
 80047b6:	d903      	bls.n	80047c0 <_svfiprintf_r+0x1a8>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0c5      	beq.n	8004748 <_svfiprintf_r+0x130>
 80047bc:	9105      	str	r1, [sp, #20]
 80047be:	e7c3      	b.n	8004748 <_svfiprintf_r+0x130>
 80047c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80047c4:	4604      	mov	r4, r0
 80047c6:	2301      	movs	r3, #1
 80047c8:	e7f0      	b.n	80047ac <_svfiprintf_r+0x194>
 80047ca:	ab03      	add	r3, sp, #12
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	462a      	mov	r2, r5
 80047d0:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <_svfiprintf_r+0x1f8>)
 80047d2:	a904      	add	r1, sp, #16
 80047d4:	4638      	mov	r0, r7
 80047d6:	f3af 8000 	nop.w
 80047da:	1c42      	adds	r2, r0, #1
 80047dc:	4606      	mov	r6, r0
 80047de:	d1d6      	bne.n	800478e <_svfiprintf_r+0x176>
 80047e0:	89ab      	ldrh	r3, [r5, #12]
 80047e2:	065b      	lsls	r3, r3, #25
 80047e4:	f53f af2c 	bmi.w	8004640 <_svfiprintf_r+0x28>
 80047e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047ea:	b01d      	add	sp, #116	; 0x74
 80047ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f0:	ab03      	add	r3, sp, #12
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	462a      	mov	r2, r5
 80047f6:	4b06      	ldr	r3, [pc, #24]	; (8004810 <_svfiprintf_r+0x1f8>)
 80047f8:	a904      	add	r1, sp, #16
 80047fa:	4638      	mov	r0, r7
 80047fc:	f000 f87a 	bl	80048f4 <_printf_i>
 8004800:	e7eb      	b.n	80047da <_svfiprintf_r+0x1c2>
 8004802:	bf00      	nop
 8004804:	08004ee4 	.word	0x08004ee4
 8004808:	08004eee 	.word	0x08004eee
 800480c:	00000000 	.word	0x00000000
 8004810:	08004561 	.word	0x08004561
 8004814:	08004eea 	.word	0x08004eea

08004818 <_printf_common>:
 8004818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800481c:	4616      	mov	r6, r2
 800481e:	4699      	mov	r9, r3
 8004820:	688a      	ldr	r2, [r1, #8]
 8004822:	690b      	ldr	r3, [r1, #16]
 8004824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004828:	4293      	cmp	r3, r2
 800482a:	bfb8      	it	lt
 800482c:	4613      	movlt	r3, r2
 800482e:	6033      	str	r3, [r6, #0]
 8004830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004834:	4607      	mov	r7, r0
 8004836:	460c      	mov	r4, r1
 8004838:	b10a      	cbz	r2, 800483e <_printf_common+0x26>
 800483a:	3301      	adds	r3, #1
 800483c:	6033      	str	r3, [r6, #0]
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	0699      	lsls	r1, r3, #26
 8004842:	bf42      	ittt	mi
 8004844:	6833      	ldrmi	r3, [r6, #0]
 8004846:	3302      	addmi	r3, #2
 8004848:	6033      	strmi	r3, [r6, #0]
 800484a:	6825      	ldr	r5, [r4, #0]
 800484c:	f015 0506 	ands.w	r5, r5, #6
 8004850:	d106      	bne.n	8004860 <_printf_common+0x48>
 8004852:	f104 0a19 	add.w	sl, r4, #25
 8004856:	68e3      	ldr	r3, [r4, #12]
 8004858:	6832      	ldr	r2, [r6, #0]
 800485a:	1a9b      	subs	r3, r3, r2
 800485c:	42ab      	cmp	r3, r5
 800485e:	dc26      	bgt.n	80048ae <_printf_common+0x96>
 8004860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004864:	1e13      	subs	r3, r2, #0
 8004866:	6822      	ldr	r2, [r4, #0]
 8004868:	bf18      	it	ne
 800486a:	2301      	movne	r3, #1
 800486c:	0692      	lsls	r2, r2, #26
 800486e:	d42b      	bmi.n	80048c8 <_printf_common+0xb0>
 8004870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004874:	4649      	mov	r1, r9
 8004876:	4638      	mov	r0, r7
 8004878:	47c0      	blx	r8
 800487a:	3001      	adds	r0, #1
 800487c:	d01e      	beq.n	80048bc <_printf_common+0xa4>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	68e5      	ldr	r5, [r4, #12]
 8004882:	6832      	ldr	r2, [r6, #0]
 8004884:	f003 0306 	and.w	r3, r3, #6
 8004888:	2b04      	cmp	r3, #4
 800488a:	bf08      	it	eq
 800488c:	1aad      	subeq	r5, r5, r2
 800488e:	68a3      	ldr	r3, [r4, #8]
 8004890:	6922      	ldr	r2, [r4, #16]
 8004892:	bf0c      	ite	eq
 8004894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004898:	2500      	movne	r5, #0
 800489a:	4293      	cmp	r3, r2
 800489c:	bfc4      	itt	gt
 800489e:	1a9b      	subgt	r3, r3, r2
 80048a0:	18ed      	addgt	r5, r5, r3
 80048a2:	2600      	movs	r6, #0
 80048a4:	341a      	adds	r4, #26
 80048a6:	42b5      	cmp	r5, r6
 80048a8:	d11a      	bne.n	80048e0 <_printf_common+0xc8>
 80048aa:	2000      	movs	r0, #0
 80048ac:	e008      	b.n	80048c0 <_printf_common+0xa8>
 80048ae:	2301      	movs	r3, #1
 80048b0:	4652      	mov	r2, sl
 80048b2:	4649      	mov	r1, r9
 80048b4:	4638      	mov	r0, r7
 80048b6:	47c0      	blx	r8
 80048b8:	3001      	adds	r0, #1
 80048ba:	d103      	bne.n	80048c4 <_printf_common+0xac>
 80048bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c4:	3501      	adds	r5, #1
 80048c6:	e7c6      	b.n	8004856 <_printf_common+0x3e>
 80048c8:	18e1      	adds	r1, r4, r3
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	2030      	movs	r0, #48	; 0x30
 80048ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048d2:	4422      	add	r2, r4
 80048d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048dc:	3302      	adds	r3, #2
 80048de:	e7c7      	b.n	8004870 <_printf_common+0x58>
 80048e0:	2301      	movs	r3, #1
 80048e2:	4622      	mov	r2, r4
 80048e4:	4649      	mov	r1, r9
 80048e6:	4638      	mov	r0, r7
 80048e8:	47c0      	blx	r8
 80048ea:	3001      	adds	r0, #1
 80048ec:	d0e6      	beq.n	80048bc <_printf_common+0xa4>
 80048ee:	3601      	adds	r6, #1
 80048f0:	e7d9      	b.n	80048a6 <_printf_common+0x8e>
	...

080048f4 <_printf_i>:
 80048f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f8:	7e0f      	ldrb	r7, [r1, #24]
 80048fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048fc:	2f78      	cmp	r7, #120	; 0x78
 80048fe:	4691      	mov	r9, r2
 8004900:	4680      	mov	r8, r0
 8004902:	460c      	mov	r4, r1
 8004904:	469a      	mov	sl, r3
 8004906:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800490a:	d807      	bhi.n	800491c <_printf_i+0x28>
 800490c:	2f62      	cmp	r7, #98	; 0x62
 800490e:	d80a      	bhi.n	8004926 <_printf_i+0x32>
 8004910:	2f00      	cmp	r7, #0
 8004912:	f000 80d8 	beq.w	8004ac6 <_printf_i+0x1d2>
 8004916:	2f58      	cmp	r7, #88	; 0x58
 8004918:	f000 80a3 	beq.w	8004a62 <_printf_i+0x16e>
 800491c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004924:	e03a      	b.n	800499c <_printf_i+0xa8>
 8004926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800492a:	2b15      	cmp	r3, #21
 800492c:	d8f6      	bhi.n	800491c <_printf_i+0x28>
 800492e:	a101      	add	r1, pc, #4	; (adr r1, 8004934 <_printf_i+0x40>)
 8004930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004934:	0800498d 	.word	0x0800498d
 8004938:	080049a1 	.word	0x080049a1
 800493c:	0800491d 	.word	0x0800491d
 8004940:	0800491d 	.word	0x0800491d
 8004944:	0800491d 	.word	0x0800491d
 8004948:	0800491d 	.word	0x0800491d
 800494c:	080049a1 	.word	0x080049a1
 8004950:	0800491d 	.word	0x0800491d
 8004954:	0800491d 	.word	0x0800491d
 8004958:	0800491d 	.word	0x0800491d
 800495c:	0800491d 	.word	0x0800491d
 8004960:	08004aad 	.word	0x08004aad
 8004964:	080049d1 	.word	0x080049d1
 8004968:	08004a8f 	.word	0x08004a8f
 800496c:	0800491d 	.word	0x0800491d
 8004970:	0800491d 	.word	0x0800491d
 8004974:	08004acf 	.word	0x08004acf
 8004978:	0800491d 	.word	0x0800491d
 800497c:	080049d1 	.word	0x080049d1
 8004980:	0800491d 	.word	0x0800491d
 8004984:	0800491d 	.word	0x0800491d
 8004988:	08004a97 	.word	0x08004a97
 800498c:	682b      	ldr	r3, [r5, #0]
 800498e:	1d1a      	adds	r2, r3, #4
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	602a      	str	r2, [r5, #0]
 8004994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800499c:	2301      	movs	r3, #1
 800499e:	e0a3      	b.n	8004ae8 <_printf_i+0x1f4>
 80049a0:	6820      	ldr	r0, [r4, #0]
 80049a2:	6829      	ldr	r1, [r5, #0]
 80049a4:	0606      	lsls	r6, r0, #24
 80049a6:	f101 0304 	add.w	r3, r1, #4
 80049aa:	d50a      	bpl.n	80049c2 <_printf_i+0xce>
 80049ac:	680e      	ldr	r6, [r1, #0]
 80049ae:	602b      	str	r3, [r5, #0]
 80049b0:	2e00      	cmp	r6, #0
 80049b2:	da03      	bge.n	80049bc <_printf_i+0xc8>
 80049b4:	232d      	movs	r3, #45	; 0x2d
 80049b6:	4276      	negs	r6, r6
 80049b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049bc:	485e      	ldr	r0, [pc, #376]	; (8004b38 <_printf_i+0x244>)
 80049be:	230a      	movs	r3, #10
 80049c0:	e019      	b.n	80049f6 <_printf_i+0x102>
 80049c2:	680e      	ldr	r6, [r1, #0]
 80049c4:	602b      	str	r3, [r5, #0]
 80049c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049ca:	bf18      	it	ne
 80049cc:	b236      	sxthne	r6, r6
 80049ce:	e7ef      	b.n	80049b0 <_printf_i+0xbc>
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	6820      	ldr	r0, [r4, #0]
 80049d4:	1d19      	adds	r1, r3, #4
 80049d6:	6029      	str	r1, [r5, #0]
 80049d8:	0601      	lsls	r1, r0, #24
 80049da:	d501      	bpl.n	80049e0 <_printf_i+0xec>
 80049dc:	681e      	ldr	r6, [r3, #0]
 80049de:	e002      	b.n	80049e6 <_printf_i+0xf2>
 80049e0:	0646      	lsls	r6, r0, #25
 80049e2:	d5fb      	bpl.n	80049dc <_printf_i+0xe8>
 80049e4:	881e      	ldrh	r6, [r3, #0]
 80049e6:	4854      	ldr	r0, [pc, #336]	; (8004b38 <_printf_i+0x244>)
 80049e8:	2f6f      	cmp	r7, #111	; 0x6f
 80049ea:	bf0c      	ite	eq
 80049ec:	2308      	moveq	r3, #8
 80049ee:	230a      	movne	r3, #10
 80049f0:	2100      	movs	r1, #0
 80049f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049f6:	6865      	ldr	r5, [r4, #4]
 80049f8:	60a5      	str	r5, [r4, #8]
 80049fa:	2d00      	cmp	r5, #0
 80049fc:	bfa2      	ittt	ge
 80049fe:	6821      	ldrge	r1, [r4, #0]
 8004a00:	f021 0104 	bicge.w	r1, r1, #4
 8004a04:	6021      	strge	r1, [r4, #0]
 8004a06:	b90e      	cbnz	r6, 8004a0c <_printf_i+0x118>
 8004a08:	2d00      	cmp	r5, #0
 8004a0a:	d04d      	beq.n	8004aa8 <_printf_i+0x1b4>
 8004a0c:	4615      	mov	r5, r2
 8004a0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a12:	fb03 6711 	mls	r7, r3, r1, r6
 8004a16:	5dc7      	ldrb	r7, [r0, r7]
 8004a18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a1c:	4637      	mov	r7, r6
 8004a1e:	42bb      	cmp	r3, r7
 8004a20:	460e      	mov	r6, r1
 8004a22:	d9f4      	bls.n	8004a0e <_printf_i+0x11a>
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d10b      	bne.n	8004a40 <_printf_i+0x14c>
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	07de      	lsls	r6, r3, #31
 8004a2c:	d508      	bpl.n	8004a40 <_printf_i+0x14c>
 8004a2e:	6923      	ldr	r3, [r4, #16]
 8004a30:	6861      	ldr	r1, [r4, #4]
 8004a32:	4299      	cmp	r1, r3
 8004a34:	bfde      	ittt	le
 8004a36:	2330      	movle	r3, #48	; 0x30
 8004a38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a3c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a40:	1b52      	subs	r2, r2, r5
 8004a42:	6122      	str	r2, [r4, #16]
 8004a44:	f8cd a000 	str.w	sl, [sp]
 8004a48:	464b      	mov	r3, r9
 8004a4a:	aa03      	add	r2, sp, #12
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	4640      	mov	r0, r8
 8004a50:	f7ff fee2 	bl	8004818 <_printf_common>
 8004a54:	3001      	adds	r0, #1
 8004a56:	d14c      	bne.n	8004af2 <_printf_i+0x1fe>
 8004a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a5c:	b004      	add	sp, #16
 8004a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a62:	4835      	ldr	r0, [pc, #212]	; (8004b38 <_printf_i+0x244>)
 8004a64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a68:	6829      	ldr	r1, [r5, #0]
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a70:	6029      	str	r1, [r5, #0]
 8004a72:	061d      	lsls	r5, r3, #24
 8004a74:	d514      	bpl.n	8004aa0 <_printf_i+0x1ac>
 8004a76:	07df      	lsls	r7, r3, #31
 8004a78:	bf44      	itt	mi
 8004a7a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a7e:	6023      	strmi	r3, [r4, #0]
 8004a80:	b91e      	cbnz	r6, 8004a8a <_printf_i+0x196>
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	f023 0320 	bic.w	r3, r3, #32
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	2310      	movs	r3, #16
 8004a8c:	e7b0      	b.n	80049f0 <_printf_i+0xfc>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	f043 0320 	orr.w	r3, r3, #32
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	2378      	movs	r3, #120	; 0x78
 8004a98:	4828      	ldr	r0, [pc, #160]	; (8004b3c <_printf_i+0x248>)
 8004a9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a9e:	e7e3      	b.n	8004a68 <_printf_i+0x174>
 8004aa0:	0659      	lsls	r1, r3, #25
 8004aa2:	bf48      	it	mi
 8004aa4:	b2b6      	uxthmi	r6, r6
 8004aa6:	e7e6      	b.n	8004a76 <_printf_i+0x182>
 8004aa8:	4615      	mov	r5, r2
 8004aaa:	e7bb      	b.n	8004a24 <_printf_i+0x130>
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	6826      	ldr	r6, [r4, #0]
 8004ab0:	6961      	ldr	r1, [r4, #20]
 8004ab2:	1d18      	adds	r0, r3, #4
 8004ab4:	6028      	str	r0, [r5, #0]
 8004ab6:	0635      	lsls	r5, r6, #24
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	d501      	bpl.n	8004ac0 <_printf_i+0x1cc>
 8004abc:	6019      	str	r1, [r3, #0]
 8004abe:	e002      	b.n	8004ac6 <_printf_i+0x1d2>
 8004ac0:	0670      	lsls	r0, r6, #25
 8004ac2:	d5fb      	bpl.n	8004abc <_printf_i+0x1c8>
 8004ac4:	8019      	strh	r1, [r3, #0]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	6123      	str	r3, [r4, #16]
 8004aca:	4615      	mov	r5, r2
 8004acc:	e7ba      	b.n	8004a44 <_printf_i+0x150>
 8004ace:	682b      	ldr	r3, [r5, #0]
 8004ad0:	1d1a      	adds	r2, r3, #4
 8004ad2:	602a      	str	r2, [r5, #0]
 8004ad4:	681d      	ldr	r5, [r3, #0]
 8004ad6:	6862      	ldr	r2, [r4, #4]
 8004ad8:	2100      	movs	r1, #0
 8004ada:	4628      	mov	r0, r5
 8004adc:	f7fb fb80 	bl	80001e0 <memchr>
 8004ae0:	b108      	cbz	r0, 8004ae6 <_printf_i+0x1f2>
 8004ae2:	1b40      	subs	r0, r0, r5
 8004ae4:	6060      	str	r0, [r4, #4]
 8004ae6:	6863      	ldr	r3, [r4, #4]
 8004ae8:	6123      	str	r3, [r4, #16]
 8004aea:	2300      	movs	r3, #0
 8004aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004af0:	e7a8      	b.n	8004a44 <_printf_i+0x150>
 8004af2:	6923      	ldr	r3, [r4, #16]
 8004af4:	462a      	mov	r2, r5
 8004af6:	4649      	mov	r1, r9
 8004af8:	4640      	mov	r0, r8
 8004afa:	47d0      	blx	sl
 8004afc:	3001      	adds	r0, #1
 8004afe:	d0ab      	beq.n	8004a58 <_printf_i+0x164>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	079b      	lsls	r3, r3, #30
 8004b04:	d413      	bmi.n	8004b2e <_printf_i+0x23a>
 8004b06:	68e0      	ldr	r0, [r4, #12]
 8004b08:	9b03      	ldr	r3, [sp, #12]
 8004b0a:	4298      	cmp	r0, r3
 8004b0c:	bfb8      	it	lt
 8004b0e:	4618      	movlt	r0, r3
 8004b10:	e7a4      	b.n	8004a5c <_printf_i+0x168>
 8004b12:	2301      	movs	r3, #1
 8004b14:	4632      	mov	r2, r6
 8004b16:	4649      	mov	r1, r9
 8004b18:	4640      	mov	r0, r8
 8004b1a:	47d0      	blx	sl
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	d09b      	beq.n	8004a58 <_printf_i+0x164>
 8004b20:	3501      	adds	r5, #1
 8004b22:	68e3      	ldr	r3, [r4, #12]
 8004b24:	9903      	ldr	r1, [sp, #12]
 8004b26:	1a5b      	subs	r3, r3, r1
 8004b28:	42ab      	cmp	r3, r5
 8004b2a:	dcf2      	bgt.n	8004b12 <_printf_i+0x21e>
 8004b2c:	e7eb      	b.n	8004b06 <_printf_i+0x212>
 8004b2e:	2500      	movs	r5, #0
 8004b30:	f104 0619 	add.w	r6, r4, #25
 8004b34:	e7f5      	b.n	8004b22 <_printf_i+0x22e>
 8004b36:	bf00      	nop
 8004b38:	08004ef5 	.word	0x08004ef5
 8004b3c:	08004f06 	.word	0x08004f06

08004b40 <memcpy>:
 8004b40:	440a      	add	r2, r1
 8004b42:	4291      	cmp	r1, r2
 8004b44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004b48:	d100      	bne.n	8004b4c <memcpy+0xc>
 8004b4a:	4770      	bx	lr
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b56:	4291      	cmp	r1, r2
 8004b58:	d1f9      	bne.n	8004b4e <memcpy+0xe>
 8004b5a:	bd10      	pop	{r4, pc}

08004b5c <memmove>:
 8004b5c:	4288      	cmp	r0, r1
 8004b5e:	b510      	push	{r4, lr}
 8004b60:	eb01 0402 	add.w	r4, r1, r2
 8004b64:	d902      	bls.n	8004b6c <memmove+0x10>
 8004b66:	4284      	cmp	r4, r0
 8004b68:	4623      	mov	r3, r4
 8004b6a:	d807      	bhi.n	8004b7c <memmove+0x20>
 8004b6c:	1e43      	subs	r3, r0, #1
 8004b6e:	42a1      	cmp	r1, r4
 8004b70:	d008      	beq.n	8004b84 <memmove+0x28>
 8004b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b7a:	e7f8      	b.n	8004b6e <memmove+0x12>
 8004b7c:	4402      	add	r2, r0
 8004b7e:	4601      	mov	r1, r0
 8004b80:	428a      	cmp	r2, r1
 8004b82:	d100      	bne.n	8004b86 <memmove+0x2a>
 8004b84:	bd10      	pop	{r4, pc}
 8004b86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b8e:	e7f7      	b.n	8004b80 <memmove+0x24>

08004b90 <_free_r>:
 8004b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b92:	2900      	cmp	r1, #0
 8004b94:	d044      	beq.n	8004c20 <_free_r+0x90>
 8004b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b9a:	9001      	str	r0, [sp, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8004ba2:	bfb8      	it	lt
 8004ba4:	18e4      	addlt	r4, r4, r3
 8004ba6:	f000 f913 	bl	8004dd0 <__malloc_lock>
 8004baa:	4a1e      	ldr	r2, [pc, #120]	; (8004c24 <_free_r+0x94>)
 8004bac:	9801      	ldr	r0, [sp, #4]
 8004bae:	6813      	ldr	r3, [r2, #0]
 8004bb0:	b933      	cbnz	r3, 8004bc0 <_free_r+0x30>
 8004bb2:	6063      	str	r3, [r4, #4]
 8004bb4:	6014      	str	r4, [r2, #0]
 8004bb6:	b003      	add	sp, #12
 8004bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bbc:	f000 b90e 	b.w	8004ddc <__malloc_unlock>
 8004bc0:	42a3      	cmp	r3, r4
 8004bc2:	d908      	bls.n	8004bd6 <_free_r+0x46>
 8004bc4:	6825      	ldr	r5, [r4, #0]
 8004bc6:	1961      	adds	r1, r4, r5
 8004bc8:	428b      	cmp	r3, r1
 8004bca:	bf01      	itttt	eq
 8004bcc:	6819      	ldreq	r1, [r3, #0]
 8004bce:	685b      	ldreq	r3, [r3, #4]
 8004bd0:	1949      	addeq	r1, r1, r5
 8004bd2:	6021      	streq	r1, [r4, #0]
 8004bd4:	e7ed      	b.n	8004bb2 <_free_r+0x22>
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	b10b      	cbz	r3, 8004be0 <_free_r+0x50>
 8004bdc:	42a3      	cmp	r3, r4
 8004bde:	d9fa      	bls.n	8004bd6 <_free_r+0x46>
 8004be0:	6811      	ldr	r1, [r2, #0]
 8004be2:	1855      	adds	r5, r2, r1
 8004be4:	42a5      	cmp	r5, r4
 8004be6:	d10b      	bne.n	8004c00 <_free_r+0x70>
 8004be8:	6824      	ldr	r4, [r4, #0]
 8004bea:	4421      	add	r1, r4
 8004bec:	1854      	adds	r4, r2, r1
 8004bee:	42a3      	cmp	r3, r4
 8004bf0:	6011      	str	r1, [r2, #0]
 8004bf2:	d1e0      	bne.n	8004bb6 <_free_r+0x26>
 8004bf4:	681c      	ldr	r4, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	6053      	str	r3, [r2, #4]
 8004bfa:	4421      	add	r1, r4
 8004bfc:	6011      	str	r1, [r2, #0]
 8004bfe:	e7da      	b.n	8004bb6 <_free_r+0x26>
 8004c00:	d902      	bls.n	8004c08 <_free_r+0x78>
 8004c02:	230c      	movs	r3, #12
 8004c04:	6003      	str	r3, [r0, #0]
 8004c06:	e7d6      	b.n	8004bb6 <_free_r+0x26>
 8004c08:	6825      	ldr	r5, [r4, #0]
 8004c0a:	1961      	adds	r1, r4, r5
 8004c0c:	428b      	cmp	r3, r1
 8004c0e:	bf04      	itt	eq
 8004c10:	6819      	ldreq	r1, [r3, #0]
 8004c12:	685b      	ldreq	r3, [r3, #4]
 8004c14:	6063      	str	r3, [r4, #4]
 8004c16:	bf04      	itt	eq
 8004c18:	1949      	addeq	r1, r1, r5
 8004c1a:	6021      	streq	r1, [r4, #0]
 8004c1c:	6054      	str	r4, [r2, #4]
 8004c1e:	e7ca      	b.n	8004bb6 <_free_r+0x26>
 8004c20:	b003      	add	sp, #12
 8004c22:	bd30      	pop	{r4, r5, pc}
 8004c24:	2000018c 	.word	0x2000018c

08004c28 <sbrk_aligned>:
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	4e0e      	ldr	r6, [pc, #56]	; (8004c64 <sbrk_aligned+0x3c>)
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	6831      	ldr	r1, [r6, #0]
 8004c30:	4605      	mov	r5, r0
 8004c32:	b911      	cbnz	r1, 8004c3a <sbrk_aligned+0x12>
 8004c34:	f000 f8bc 	bl	8004db0 <_sbrk_r>
 8004c38:	6030      	str	r0, [r6, #0]
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	f000 f8b7 	bl	8004db0 <_sbrk_r>
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	d00a      	beq.n	8004c5c <sbrk_aligned+0x34>
 8004c46:	1cc4      	adds	r4, r0, #3
 8004c48:	f024 0403 	bic.w	r4, r4, #3
 8004c4c:	42a0      	cmp	r0, r4
 8004c4e:	d007      	beq.n	8004c60 <sbrk_aligned+0x38>
 8004c50:	1a21      	subs	r1, r4, r0
 8004c52:	4628      	mov	r0, r5
 8004c54:	f000 f8ac 	bl	8004db0 <_sbrk_r>
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d101      	bne.n	8004c60 <sbrk_aligned+0x38>
 8004c5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004c60:	4620      	mov	r0, r4
 8004c62:	bd70      	pop	{r4, r5, r6, pc}
 8004c64:	20000190 	.word	0x20000190

08004c68 <_malloc_r>:
 8004c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c6c:	1ccd      	adds	r5, r1, #3
 8004c6e:	f025 0503 	bic.w	r5, r5, #3
 8004c72:	3508      	adds	r5, #8
 8004c74:	2d0c      	cmp	r5, #12
 8004c76:	bf38      	it	cc
 8004c78:	250c      	movcc	r5, #12
 8004c7a:	2d00      	cmp	r5, #0
 8004c7c:	4607      	mov	r7, r0
 8004c7e:	db01      	blt.n	8004c84 <_malloc_r+0x1c>
 8004c80:	42a9      	cmp	r1, r5
 8004c82:	d905      	bls.n	8004c90 <_malloc_r+0x28>
 8004c84:	230c      	movs	r3, #12
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	2600      	movs	r6, #0
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c90:	4e2e      	ldr	r6, [pc, #184]	; (8004d4c <_malloc_r+0xe4>)
 8004c92:	f000 f89d 	bl	8004dd0 <__malloc_lock>
 8004c96:	6833      	ldr	r3, [r6, #0]
 8004c98:	461c      	mov	r4, r3
 8004c9a:	bb34      	cbnz	r4, 8004cea <_malloc_r+0x82>
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	4638      	mov	r0, r7
 8004ca0:	f7ff ffc2 	bl	8004c28 <sbrk_aligned>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	d14d      	bne.n	8004d46 <_malloc_r+0xde>
 8004caa:	6834      	ldr	r4, [r6, #0]
 8004cac:	4626      	mov	r6, r4
 8004cae:	2e00      	cmp	r6, #0
 8004cb0:	d140      	bne.n	8004d34 <_malloc_r+0xcc>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	eb04 0803 	add.w	r8, r4, r3
 8004cbc:	f000 f878 	bl	8004db0 <_sbrk_r>
 8004cc0:	4580      	cmp	r8, r0
 8004cc2:	d13a      	bne.n	8004d3a <_malloc_r+0xd2>
 8004cc4:	6821      	ldr	r1, [r4, #0]
 8004cc6:	3503      	adds	r5, #3
 8004cc8:	1a6d      	subs	r5, r5, r1
 8004cca:	f025 0503 	bic.w	r5, r5, #3
 8004cce:	3508      	adds	r5, #8
 8004cd0:	2d0c      	cmp	r5, #12
 8004cd2:	bf38      	it	cc
 8004cd4:	250c      	movcc	r5, #12
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f7ff ffa5 	bl	8004c28 <sbrk_aligned>
 8004cde:	3001      	adds	r0, #1
 8004ce0:	d02b      	beq.n	8004d3a <_malloc_r+0xd2>
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	442b      	add	r3, r5
 8004ce6:	6023      	str	r3, [r4, #0]
 8004ce8:	e00e      	b.n	8004d08 <_malloc_r+0xa0>
 8004cea:	6822      	ldr	r2, [r4, #0]
 8004cec:	1b52      	subs	r2, r2, r5
 8004cee:	d41e      	bmi.n	8004d2e <_malloc_r+0xc6>
 8004cf0:	2a0b      	cmp	r2, #11
 8004cf2:	d916      	bls.n	8004d22 <_malloc_r+0xba>
 8004cf4:	1961      	adds	r1, r4, r5
 8004cf6:	42a3      	cmp	r3, r4
 8004cf8:	6025      	str	r5, [r4, #0]
 8004cfa:	bf18      	it	ne
 8004cfc:	6059      	strne	r1, [r3, #4]
 8004cfe:	6863      	ldr	r3, [r4, #4]
 8004d00:	bf08      	it	eq
 8004d02:	6031      	streq	r1, [r6, #0]
 8004d04:	5162      	str	r2, [r4, r5]
 8004d06:	604b      	str	r3, [r1, #4]
 8004d08:	4638      	mov	r0, r7
 8004d0a:	f104 060b 	add.w	r6, r4, #11
 8004d0e:	f000 f865 	bl	8004ddc <__malloc_unlock>
 8004d12:	f026 0607 	bic.w	r6, r6, #7
 8004d16:	1d23      	adds	r3, r4, #4
 8004d18:	1af2      	subs	r2, r6, r3
 8004d1a:	d0b6      	beq.n	8004c8a <_malloc_r+0x22>
 8004d1c:	1b9b      	subs	r3, r3, r6
 8004d1e:	50a3      	str	r3, [r4, r2]
 8004d20:	e7b3      	b.n	8004c8a <_malloc_r+0x22>
 8004d22:	6862      	ldr	r2, [r4, #4]
 8004d24:	42a3      	cmp	r3, r4
 8004d26:	bf0c      	ite	eq
 8004d28:	6032      	streq	r2, [r6, #0]
 8004d2a:	605a      	strne	r2, [r3, #4]
 8004d2c:	e7ec      	b.n	8004d08 <_malloc_r+0xa0>
 8004d2e:	4623      	mov	r3, r4
 8004d30:	6864      	ldr	r4, [r4, #4]
 8004d32:	e7b2      	b.n	8004c9a <_malloc_r+0x32>
 8004d34:	4634      	mov	r4, r6
 8004d36:	6876      	ldr	r6, [r6, #4]
 8004d38:	e7b9      	b.n	8004cae <_malloc_r+0x46>
 8004d3a:	230c      	movs	r3, #12
 8004d3c:	603b      	str	r3, [r7, #0]
 8004d3e:	4638      	mov	r0, r7
 8004d40:	f000 f84c 	bl	8004ddc <__malloc_unlock>
 8004d44:	e7a1      	b.n	8004c8a <_malloc_r+0x22>
 8004d46:	6025      	str	r5, [r4, #0]
 8004d48:	e7de      	b.n	8004d08 <_malloc_r+0xa0>
 8004d4a:	bf00      	nop
 8004d4c:	2000018c 	.word	0x2000018c

08004d50 <_realloc_r>:
 8004d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d54:	4680      	mov	r8, r0
 8004d56:	4614      	mov	r4, r2
 8004d58:	460e      	mov	r6, r1
 8004d5a:	b921      	cbnz	r1, 8004d66 <_realloc_r+0x16>
 8004d5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d60:	4611      	mov	r1, r2
 8004d62:	f7ff bf81 	b.w	8004c68 <_malloc_r>
 8004d66:	b92a      	cbnz	r2, 8004d74 <_realloc_r+0x24>
 8004d68:	f7ff ff12 	bl	8004b90 <_free_r>
 8004d6c:	4625      	mov	r5, r4
 8004d6e:	4628      	mov	r0, r5
 8004d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d74:	f000 f838 	bl	8004de8 <_malloc_usable_size_r>
 8004d78:	4284      	cmp	r4, r0
 8004d7a:	4607      	mov	r7, r0
 8004d7c:	d802      	bhi.n	8004d84 <_realloc_r+0x34>
 8004d7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d82:	d812      	bhi.n	8004daa <_realloc_r+0x5a>
 8004d84:	4621      	mov	r1, r4
 8004d86:	4640      	mov	r0, r8
 8004d88:	f7ff ff6e 	bl	8004c68 <_malloc_r>
 8004d8c:	4605      	mov	r5, r0
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d0ed      	beq.n	8004d6e <_realloc_r+0x1e>
 8004d92:	42bc      	cmp	r4, r7
 8004d94:	4622      	mov	r2, r4
 8004d96:	4631      	mov	r1, r6
 8004d98:	bf28      	it	cs
 8004d9a:	463a      	movcs	r2, r7
 8004d9c:	f7ff fed0 	bl	8004b40 <memcpy>
 8004da0:	4631      	mov	r1, r6
 8004da2:	4640      	mov	r0, r8
 8004da4:	f7ff fef4 	bl	8004b90 <_free_r>
 8004da8:	e7e1      	b.n	8004d6e <_realloc_r+0x1e>
 8004daa:	4635      	mov	r5, r6
 8004dac:	e7df      	b.n	8004d6e <_realloc_r+0x1e>
	...

08004db0 <_sbrk_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4d06      	ldr	r5, [pc, #24]	; (8004dcc <_sbrk_r+0x1c>)
 8004db4:	2300      	movs	r3, #0
 8004db6:	4604      	mov	r4, r0
 8004db8:	4608      	mov	r0, r1
 8004dba:	602b      	str	r3, [r5, #0]
 8004dbc:	f7fb ff2e 	bl	8000c1c <_sbrk>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	d102      	bne.n	8004dca <_sbrk_r+0x1a>
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	b103      	cbz	r3, 8004dca <_sbrk_r+0x1a>
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	bd38      	pop	{r3, r4, r5, pc}
 8004dcc:	20000194 	.word	0x20000194

08004dd0 <__malloc_lock>:
 8004dd0:	4801      	ldr	r0, [pc, #4]	; (8004dd8 <__malloc_lock+0x8>)
 8004dd2:	f000 b811 	b.w	8004df8 <__retarget_lock_acquire_recursive>
 8004dd6:	bf00      	nop
 8004dd8:	20000198 	.word	0x20000198

08004ddc <__malloc_unlock>:
 8004ddc:	4801      	ldr	r0, [pc, #4]	; (8004de4 <__malloc_unlock+0x8>)
 8004dde:	f000 b80c 	b.w	8004dfa <__retarget_lock_release_recursive>
 8004de2:	bf00      	nop
 8004de4:	20000198 	.word	0x20000198

08004de8 <_malloc_usable_size_r>:
 8004de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dec:	1f18      	subs	r0, r3, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bfbc      	itt	lt
 8004df2:	580b      	ldrlt	r3, [r1, r0]
 8004df4:	18c0      	addlt	r0, r0, r3
 8004df6:	4770      	bx	lr

08004df8 <__retarget_lock_acquire_recursive>:
 8004df8:	4770      	bx	lr

08004dfa <__retarget_lock_release_recursive>:
 8004dfa:	4770      	bx	lr

08004dfc <_init>:
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	bf00      	nop
 8004e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e02:	bc08      	pop	{r3}
 8004e04:	469e      	mov	lr, r3
 8004e06:	4770      	bx	lr

08004e08 <_fini>:
 8004e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0a:	bf00      	nop
 8004e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0e:	bc08      	pop	{r3}
 8004e10:	469e      	mov	lr, r3
 8004e12:	4770      	bx	lr
